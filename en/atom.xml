<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrbrunelli.github.io/blog/en/</id>
    <title>Blog Matheus Brunelli Blog</title>
    <updated>2023-06-12T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrbrunelli.github.io/blog/en/"/>
    <subtitle>Blog Matheus Brunelli Blog</subtitle>
    <icon>https://mrbrunelli.github.io/blog/en/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Dicas para melhorar as chances em entrevistas]]></title>
        <id>dicas-para-melhorar-as-chances-em-entrevistas</id>
        <link href="https://mrbrunelli.github.io/blog/en/dicas-para-melhorar-as-chances-em-entrevistas"/>
        <updated>2023-06-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Como melhorar as chances em uma entrevista?]]></summary>
        <content type="html"><![CDATA[<p>Como melhorar as chances em uma entrevista? Depois de fazer dezenas delas, tanto como candidato quanto entrevistador, percebi um certo padrão em entrevistas que foram bem sucedidas, e também em entrevistas que não foram.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="negociação">Negociação<a class="hash-link" href="#negociação" title="Direct link to heading">​</a></h2><p>Entrevista não é apenas uma triagem com monólogo, onde o entrevistador faz uma série de quiz ao candidato, e este só acena com a cabeça. A entrevista é o momento onde ambas as partes irão se conhecer e negociar, o candidato irá oferecer os seus serviços e habilidades em troca de um salário. Se ambos estão nessa etapa, então ambos estão interessados, ou pelo menos deveriam.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="pergunte">Pergunte<a class="hash-link" href="#pergunte" title="Direct link to heading">​</a></h3><p>É importante que o candidato faça perguntas sobre a empresa, e que não seja passivo durante a conversa. Talvez esse seja um dos maiores erros que os candidatos cometam.</p><p>Perguntar sobre o futuro local de trabalho não deveria ser um tabu. Algumas das perguntas que podem ajudar a conhecer melhor a empresa:</p><ul><li>Qual a faixa salarial para essa vaga?</li><li>Quantos candidatos estão concorrendo comigo?</li><li>Como a empresa lida com horas extras? As pessoas trabalham mais que o combinado?</li><li>Como tem sido as últimas entregas? Houveram muitos atrasos? Se sim, por quê?</li><li>Cite 3 pontos que fazem você amar seu trabalho.</li><li>Cite 3 pontos que fazem você pensar em trocar de emprego.</li><li>Quais os objetivos da empresa para os próximos 5 anos?</li><li>Qual foi o crescimento da empresa no último ano?</li></ul><p>As perguntas não precisam ser exatamente essas, o que importa aqui é colher o máximo de informações sobre o local de trabalho, e caso não seja do seu interesse, poderá agradecer e encerrar a entrevista.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="direto-ao-ponto">Direto ao ponto<a class="hash-link" href="#direto-ao-ponto" title="Direct link to heading">​</a></h3><p>Nem sempre o recrutador conduzirá bem a entrevista, então ele pode acabar te dando corda demais e você começar a falar sem parar. Procure não falar de coisas que não irão agregar para a entrevista. Falar demais não significa que você está indo bem. Responda bem as perguntas, e se necessário peça para o recrutador reformular a pergunta.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="autopromoção">Autopromoção<a class="hash-link" href="#autopromoção" title="Direct link to heading">​</a></h3><p>Deixe claro o que você faz bem, em outras palavras, destaque as suas habilidades. Se você é bom em fazer a atividade X, então fale disso sem vergonha. O recrutador precisa entender que você é realmente bom nisso, ele não tem bola de cristal.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="lista-de-requisitos">Lista de requisitos<a class="hash-link" href="#lista-de-requisitos" title="Direct link to heading">​</a></h2><p>Geralmente a lista de requisitos das vagas é extensa, e dificilmente alguém terá domínio sobre todas elas, e isso é proposital. Muita gente deixa de aplicar para a vaga só de olhar a lista de requisitos, e com isso uma grande parcela de curiosos já caem fora.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="arrisque">Arrisque<a class="hash-link" href="#arrisque" title="Direct link to heading">​</a></h3><p>O candidato deve arriscar mesmo que não cumpra toda a lista de requisitos, e eu vou explicar o porquê. Imagine que a vaga tenha 7 requisitos, e alguém se candidata com apenas 4 dos 7 requisitos, se você tiver 5 requisitos, já estará em vantagem.</p><p>Se o recrutador não encontrar alguém melhor do que você e com mais requisitos preenchidos, você será escolhido. Portanto, as suas chances aumentam quando você se candidata.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="mais-algumas-considerações">Mais algumas considerações<a class="hash-link" href="#mais-algumas-considerações" title="Direct link to heading">​</a></h2><p>Não faz sentido não fazer vários processos ao mesmo tempo, a não ser que você tenha um objetivo específico. Do contrário, quanto mais entrevistas, maiores serão as chances. A melhor coisa é ser aprovado em mais de uma vaga e poder renegociar as condições, e escolher a que mais gostou.</p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="carreira" term="carreira"/>
        <category label="entrevista" term="entrevista"/>
        <category label="dicas" term="dicas"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aprenda a escrever testes - Parte 2]]></title>
        <id>aprenda-a-testar-pt2</id>
        <link href="https://mrbrunelli.github.io/blog/en/aprenda-a-testar-pt2"/>
        <updated>2022-10-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Como utilizar um framework de testes no Node?]]></summary>
        <content type="html"><![CDATA[<p>Como configurar e utilizar um framework de testes no Node utilizando Typescript? Temos várias opções excelentes para isso, e por esse motivo irei escolher a mais fácil para o cenário de Node + Typescript.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="como-escolher-um-framework-de-testes">Como escolher um framework de testes?<a class="hash-link" href="#como-escolher-um-framework-de-testes" title="Direct link to heading">​</a></h2><p>Primeiro devo avaliar quais os cenários quero testar, se é frontend ou backend, e se vou utilizar Javascript ou Typescript.</p><p>Vou utilizar Node + Typescript nos exemplos, e isso faz a minha lista ficar restrita a alguns nomes:</p><ul><li><a href="https://jestjs.io/pt-BR/" target="_blank" rel="noopener noreferrer">Jest</a></li><li><a href="https://mochajs.org/" target="_blank" rel="noopener noreferrer">Mocha</a></li><li><a href="https://vitest.dev/" target="_blank" rel="noopener noreferrer">Vitest</a></li></ul><blockquote><p>Jest e Mocha necessitam de um parser de Typescript para executar, como o ts-jest ou ts-node, o que pode complicar para quem está começando, já que o arquivo de configuração fica muito complexo nesses cenários.</p></blockquote><p>Não quero abrir mão do Typescript e nem da facilidade de configuração, então irei escolher o Vitest. Na página inicial do Vitest contém o <a href="https://vitest.dev/guide/" target="_blank" rel="noopener noreferrer">Get Started</a> contendo alguns exemplos de instalação e configuração.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="configurando-o-projeto">Configurando o projeto<a class="hash-link" href="#configurando-o-projeto" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="setup-node--typescript">Setup Node + Typescript<a class="hash-link" href="#setup-node--typescript" title="Direct link to heading">​</a></h3><p>Vou criar uma pasta vazia, com um nome qualquer.</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mkdir vitest-typescript-example</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Com o meu Visual Studio Code aberto nessa pasta, vou abrir um terminal integrado e iniciar o Node, e instalar as dependências básicas para o Typescript funcionar.</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">npm init -y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm install -D typescript @types/node</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Agora vou criar o tsconfig.json, que é o arquivo de configuração do Typescript. Ele irá gerar uma configuração default, e vou manter ela.</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">npx tsc --init</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Pronto, meu projeto já está configurado com Node + Typescript.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="setup-vitest">Setup Vitest<a class="hash-link" href="#setup-vitest" title="Direct link to heading">​</a></h3><p>Agora vou instalar o Vitest como dependência de desenvolvimento.</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">npm install -D vitest</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>O Vitest precisa de um arquivo de configuração para poder executar. Na própria documentação tem um exemplo simples. Vou criar um arquivo <strong>vitest.config.ts</strong> na raiz, e adicionar a configuração básica.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">vitest.config.ts</div><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> defineConfig </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"vitest/config"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">default</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">defineConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  test</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reporters</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"verbose"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Veja como o arquivo de configuração é enxuto, bem diferente dos outros frameworks citados no começo do post. <a href="https://vitest.dev/config/" target="_blank" rel="noopener noreferrer">Na documentação tenho acesso a API</a>, e como posso personalizar o <strong>defineConfig()</strong>. Não vou configurar nada extra, já está ótimo como está.</p><blockquote><p>Veja que configurei <strong>reporters</strong> como <strong>verbose</strong>, isso para que eu possa obter todas as informações do teste no terminal.</p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="configurando-o-packagejson">Configurando o package.json<a class="hash-link" href="#configurando-o-packagejson" title="Direct link to heading">​</a></h3><p>Quando eu executei o <strong>npm init -y</strong>, foi gerado um arquivo <strong>package.json</strong> na raiz, com algumas configurações bem simples. Dentro de <strong>scripts</strong> tem um script <strong>test</strong>. Vou editá-lo.</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">package.json</div><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token property" style="color:#36acaa">"scripts"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"test"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"vitest --run"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><blockquote><p>Agora quando eu executar <code>npm run test</code> no terminal, o vitest irá executar meus testes. Como não temos nenhum teste no momento, ele tentará rodar e retornará um erro dizendo que nenhum teste foi encontrado.</p></blockquote><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="escrevendo-o-primeiro-teste">Escrevendo o primeiro teste<a class="hash-link" href="#escrevendo-o-primeiro-teste" title="Direct link to heading">​</a></h2><p>Vou criar uma pasta <strong>test</strong> na raiz, e criar um arquivo chamado <strong>primeiro-teste.test.ts</strong> dentro dela. Em seguida irei adicionar alguns cenários.</p><blockquote><p>É importante respeitar a extensão <strong>.test.ts</strong>, pois o Vitest procura por essa extensão durante a execução.</p></blockquote><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">primeiro-teste.test.ts</div><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> describe</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> test</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> expect </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"vitest"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Contém um conjunto de testes, que será executado um a um"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Deve somar 20 + 50 e retornar 70"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">70</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Deve concatenar a palavra 'Olá' com a palavra 'Mundo' e retornar 'Olá Mundo'"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Olá "</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Mundo"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Olá Mundo"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Deve retornar que o Palmeiras não tem mundial"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> temMundial </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temMundial</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBeFalsy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Deve conter todos os valores do objeto fornecido"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> meuObjeto </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      nome</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Palmeiras"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      temMundial</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Verde"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">meuObjeto</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toEqual</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      nome</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Palmeiras"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      temMundial</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Verde"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Agora vou abrir o terminal e executar <code>npm run test</code>, e o Vitest irá executar e retornar todos esses cenários no terminal, verde caso tenha passado, e vermelho caso tenha reprovado algum.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="sucesso">Sucesso<a class="hash-link" href="#sucesso" title="Direct link to heading">​</a></h3><p><img src="/blog/en/assets/images/vitest-sucess-20feb8caef2209546910c0cbe62f35de.png" width="664" height="302"></p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="erro">Erro<a class="hash-link" href="#erro" title="Direct link to heading">​</a></h3><p>Adicionei um campo a mais no objeto do último teste, <strong>porém não adicionei no expect</strong>, logo o teste fez a comparação e reprovou, pois os objetos não são mais iguais.</p><blockquote><p>Veja como a inteface é amigável, ela exibe com muita clareza qual teste reprovou e o motivo.</p></blockquote><p><img src="/blog/en/assets/images/vitest-error-6e60e31933520b832c84088fbbab24d9.png" width="942" height="564"></p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="resumo">Resumo<a class="hash-link" href="#resumo" title="Direct link to heading">​</a></h2><ul><li>Preciso saber em qual cenário vou escrever meus testes, se é frontend ou backend, pois cada um possuí a ferramenta certa para o cenário.</li><li>Se eu ainda não sei testar, devo procurar o framework mais fácil para aprender. Nesse caso foi o Vitest, pois ele tem uma filosofia <strong>less config</strong>.</li><li>A documentação contém tudo que preciso para configurar o framework, e ainda contém vários exemplos.</li><li>O Vitest procura por arquivos que tenham a extensão <strong>.test.ts</strong>.</li><li>Os resultados dos testes são exibidos no terminal, de uma forma muito amigável.</li><li>Posso executar o comando <code>npm run test</code> quantas vezes quiser, e o teste executará em milésimos de segundos.</li><li>Automatizar é bem melhor que testar manualmente.</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="repositório-com-o-código">Repositório com o código<a class="hash-link" href="#repositório-com-o-código" title="Direct link to heading">​</a></h3><p><a href="https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-2" target="_blank" rel="noopener noreferrer">https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-2</a></p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="teste" term="teste"/>
        <category label="cobertura" term="cobertura"/>
        <category label="qualidade" term="qualidade"/>
        <category label="testes automatizados" term="testes automatizados"/>
        <category label="vitest" term="vitest"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aprenda a escrever testes - Parte 1]]></title>
        <id>aprenda-a-testar-pt1</id>
        <link href="https://mrbrunelli.github.io/blog/en/aprenda-a-testar-pt1"/>
        <updated>2022-10-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Para que servem os testes? Como faço para escrever um teste?]]></summary>
        <content type="html"><![CDATA[<p>Para que servem os testes? Como faço para escrever um teste? Esse tema ainda pode ser muito confuso para quem está começando a programar, e até para quem já possuí mais tempo de estrada.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="afinal-para-que-servem-os-testes">Afinal, para que servem os testes?<a class="hash-link" href="#afinal-para-que-servem-os-testes" title="Direct link to heading">​</a></h2><p>Antes de responder essa pergunta, vamos entender de que testes estamos falando. A primeira coisa que me vem a mente quando alguém me pede para testar a aplicação é: <strong>executar a aplicação e fazer alguma ação e ver se o resultado esperado foi alcançado.</strong></p><p>Esse conceito está correto, e de fato isso é "testar a aplicação". Entretanto uma aplicação irá conter muitos recursos, que se forem testadas de forma manual, levará muito tempo e desgastará quem está testando. Também haverá possibilidades de erros humanos durante esse processo.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="testes-automatizados">Testes automatizados<a class="hash-link" href="#testes-automatizados" title="Direct link to heading">​</a></h3><p>Para isso existem os <strong>testes automatizados</strong>, que é uma forma de <strong>executar um script que irá testar todas as ações da aplicação</strong>, de forma automática, <strong>simulando a interação humana</strong> e observando se <strong>o resultado esperado foi alcaçado</strong>.</p><p>Os benefícios dessa prática são muitos, visto que, se o teste é automatizado, posso executá-lo e assim esperar para ver se todas as funcionalidades do sistema <strong>ainda estão ok e se comportando como deveriam</strong>. Dessa forma é possível simular toda a interação humana em todos os módulos do sistema, <strong>e em poucos segundos.</strong></p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="requisitos-para-escrever-um-teste">Requisitos para escrever um teste<a class="hash-link" href="#requisitos-para-escrever-um-teste" title="Direct link to heading">​</a></h3><p>Primeiramente devemos entender as regras de negócio da aplicação, e saber como devem se comportar em diferentes situações.</p><p>Vamos supor que nosso sistema recebe dois números e retorna a soma desses números para o usuário. Para escrever um teste em cima dessa funcionalidade, deveremos prover <strong>dois números de entrada</strong> e observar se o valor retornado <strong>é a soma dos dois números fornecidos</strong>. Se o resultado de fato for a soma dos dois números fornecidos, então o teste passará, do contrário ele reprovará.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="exemplo-1">Exemplo 1<a class="hash-link" href="#exemplo-1" title="Direct link to heading">​</a></h3><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">calculadora.ts</div><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Calculadora</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">somar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numero1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numero2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> numero1 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> numero2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">calculadora.test.ts</div><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Calculadora</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./calculadora"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Deve somar 10 + 10 e retornar 20"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> calculadora </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Calculadora</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> resultado </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> calculadora</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">somar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">resultado</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true, logo o teste passará.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="exemplo-2">Exemplo 2<a class="hash-link" href="#exemplo-2" title="Direct link to heading">​</a></h3><p>Agora, se eu alterar a regra de negócios do método <strong>somar</strong>, e fazê-lo retornar a multiplicação ao invés da soma, <strong>nosso teste irá reprovar</strong>, pois ele espera que o resultado seja <strong>20</strong> e não <strong>100</strong>.</p><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">calculadora.ts</div><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Calculadora</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">somar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numero1</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numero2</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> numero1 </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numero2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-ts theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">calculadora.test.ts</div><div class="codeBlockContent_wNvx ts"><pre tabindex="0" class="prism-code language-ts codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Calculadora</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./calculadora"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Deve somar 10 + 10 e retornar 20"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> calculadora </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name maybe-class-name">Calculadora</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> resultado </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> calculadora</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">somar</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">resultado</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">resultado</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 100 != 20, logo é false, o teste reprovará.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="o-que-eu-devo-testar">O que eu devo testar?<a class="hash-link" href="#o-que-eu-devo-testar" title="Direct link to heading">​</a></h2><p>Posso testar as regras de negócio de uma classe <strong>(unidade)</strong>, a integração de um serviço com o banco de dados <strong>(integração)</strong> e o comportamento geral do sistema <strong>(de ponta a ponta)</strong>.</p><p>Logo temos testes de unidade, testes de integração e testes de ponta a ponta.</p><p>Para que haja uma excelente cobertura, devemos utilizar todos esses tipos de testes. Alguns desenvolvedores optam por utilizar apenas um desses tipos de testes, o que pode resultar em <strong>uma ou várias lacunas na cobertura do sistema.</strong></p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="resumo">Resumo<a class="hash-link" href="#resumo" title="Direct link to heading">​</a></h2><ul><li>Testar é executar uma ação no sistema e observar se o resultado obtivo é de fato esperado.</li><li>Testes automatizados excluem a necessidade de testes humanos e manuais.</li><li>Os tipos de testes são: unidade, integração e de ponta a ponta.</li><li>Testar garante que o comportamento do sistema será preservado. Em caso de quebra, os testes avisarão onde ocorreu a quebra.</li><li>Se um sistema não possuí testes automatizados, não há como o desenvolvedor saber se a alteração que ele fez quebrou o sistema. Ele terá que testar manualmente, e em muitos dos casos poderão ocorrer falhas humanas e o sistema poderá ir para produção com defeito <strong>(em muitos casos isso pode significar prejuízo financeiro para a empresa, e até falência da mesma).</strong></li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="repositório-com-o-código">Repositório com o código<a class="hash-link" href="#repositório-com-o-código" title="Direct link to heading">​</a></h3><p><a href="https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-1" target="_blank" rel="noopener noreferrer">https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-1</a></p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="teste" term="teste"/>
        <category label="cobertura" term="cobertura"/>
        <category label="qualidade" term="qualidade"/>
        <category label="testes automatizados" term="testes automatizados"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Como validar dados de uma forma elegante]]></title>
        <id>como-validar-dados-de-uma-forma-elegante</id>
        <link href="https://mrbrunelli.github.io/blog/en/como-validar-dados-de-uma-forma-elegante"/>
        <updated>2022-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hoje vou ensinar uma maneira bem elegante de validar dados no Javascript. E o mais legal, usando somente os recursos nativos da linguagem!]]></summary>
        <content type="html"><![CDATA[<p>Salve galera, tudo bem com vocês?
Hoje vou ensinar uma maneira bem elegante de validar dados no Javascript. E o mais legal, usando somente os recursos nativos da linguagem.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="entendendo-o-cenário">Entendendo o cenário<a class="hash-link" href="#entendendo-o-cenário" title="Direct link to heading">​</a></h2><p>Imagine o seguinte cenário, você precisa construir uma API que irá receber os dados de pessoas que querem receber notificações regulares sobre seu catálogo de produtos.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="requisitos">Requisitos<a class="hash-link" href="#requisitos" title="Direct link to heading">​</a></h3><p>Para sua regra de negócios funcionar, você irá precisar dos seguintes requisitos:</p><ul><li>Sua API deve ser construída da forma mais simples possível, se possível uma <a href="https://aws.amazon.com/pt/lambda/" target="_blank" rel="noopener noreferrer">Lambda</a>.</li><li>A rota deve ser do tipo POST.</li><li>Receber do cliente nome, sobrenome, email e o cep.</li><li>Todos os dados são obrigatórios.</li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="implementação-do-endpoint">Implementação do endpoint<a class="hash-link" href="#implementação-do-endpoint" title="Direct link to heading">​</a></h2><p>Vamos pular toda a parte da construção da API. Vamos prosseguir como se toda a infraestrutura já estivesse montada. Algo mais ou menos assim:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">subscribers.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">exports</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">subscribers</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> first_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> last_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> email</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cep </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> red</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> subscribersRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      first_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      last_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      email</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cep</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"Obrigado por assinar nosso catálogo! Em breve enviaremos a edição desse mês por e-mail."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">400</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> error</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Lembra que eu disse que os dados do cliente devem ser obrigatórios? Em nenhum momento nós estamos validando isso. Da maneira como os dados estão vindo, estou repassando para meu repository.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="possibilidades">Possibilidades<a class="hash-link" href="#possibilidades" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="condicionais-if-else">Condicionais: <code>if else</code><a class="hash-link" href="#condicionais-if-else" title="Direct link to heading">​</a></h3><p>A maneira mais simples de satisfazer nossa validação é criar um <code>if</code> para cada campo e lançar uma exceção caso algum retorne <code>false</code>.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="loops-padrões-for">Loops padrões: <code>for</code><a class="hash-link" href="#loops-padrões-for" title="Direct link to heading">​</a></h3><p>Outra maneira é criar um <code>for</code> e percorrer o <code>req.body</code> com o <code>Object.keys</code> e verificar campo a campo.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="conhecendo-o-every">Conhecendo o <code>every</code><a class="hash-link" href="#conhecendo-o-every" title="Direct link to heading">​</a></h3><p>Mas nosso querido Javascript já possuí um maravilhoso recurso que fará todo trabalho pesado para nós, e tudo isso de forma nativa, sem precisarmos instalar um pacote externo.</p><p>O <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener noreferrer">every</a> é um método que itera nosso array e retorna <code>true</code> somente se todos os índices retornarem <code>true</code>. Com ele é possível percorrer nosso <code>req.body</code>, e caso não tenha um determinado campo, automagicamente retornará <code>false</code>, interrompendo dessa forma a iteração.</p><p>Vamos ver como ficará:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">subscribersValidator.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SubscriberValidator</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">isValid</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">data </span><span class="token parameter operator" style="color:#393A34">=</span><span class="token parameter"> </span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> requiredFields </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"first_name"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"last_name"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"email"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cep"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> requiredFields</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">every</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">field</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">hasOwnProperty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Note que para cada campo iterado do nosso <code>requiredFields</code>, testamos com o <a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty" target="_blank" rel="noopener noreferrer">hasOwnProperty</a> se <code>field</code> está presente no objeto <code>data</code>.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="implementando-o-nosso-validador">Implementando o nosso validador<a class="hash-link" href="#implementando-o-nosso-validador" title="Direct link to heading">​</a></h2><p>Voltemos ao código do nosso endpoint, agora com nosso <code>SubscriberValidator</code>.</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">subscribers.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">SubscriberValidator</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"./validators/subscriber-validator"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exports</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">subscribers</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token maybe-class-name">SubscriberValidator</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">isValid</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Favor preencher todos os campos."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> first_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> last_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> email</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cep </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> red</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> subscribersRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      first_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      last_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      email</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cep</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"Obrigado por assinar nosso catálogo! Em breve enviaremos a edição desse mês por e-mail."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">400</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> error</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Veja como ficou enxuta nossa feature. E o melhor é que o <code>every</code> interrompe imediatamente o loop e retorna <code>false</code> caso algum campo não esteja lá no <code>req.body</code>.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="bônus">Bônus<a class="hash-link" href="#bônus" title="Direct link to heading">​</a></h3><p>Podemos refatorar nosso <code>SubscriberValidator</code> e retornar o campo que o usuário esqueceu de informar:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">subscribersValidator.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SubscriberValidator</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">isValid</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">data </span><span class="token parameter operator" style="color:#393A34">=</span><span class="token parameter"> </span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> requiredFields </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"first_name"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"last_name"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"email"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cep"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"phone"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> missingField</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isValid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> requiredFields</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">every</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">field</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hasField </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">hasOwnProperty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">hasField</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> missingField </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> hasField</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      isValid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      missingField</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Podemos refatorar nosso endpoint e retornar o campo que está faltando na <code>response</code>. Dessa forma o usuário saberá onde errou:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">subscribers.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">SubscriberValidator</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"./validators/subscriber-validator"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exports</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method-variable function-variable method function property-access" style="color:#d73a49">subscribers</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">try</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> isValid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> missingField </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">SubscriberValidator</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">isValid</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">isValid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">throw</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string string" style="color:#e3116c">O campo '</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">missingField</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">' é obrigatório!</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> first_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> last_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> email</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cep </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> red</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">body</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> subscribersRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      first_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      last_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      email</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      cep</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">200</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"Obrigado por assinar nosso catálogo! Em breve enviaremos a edição desse mês por e-mail."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">400</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token literal-property property" style="color:#36acaa">message</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> error</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="conclusão">Conclusão<a class="hash-link" href="#conclusão" title="Direct link to heading">​</a></h2><p>Utilizamos somente recursos nativos da nossa linguagem e evitamos pacotes externos desnecessários.</p><p>Caso sua API precisasse de muitas validações, gravação de logs, mensagens super refinadas, ai sim seria melhor utilizar um pacote para fazer esse trabalho.</p><p>Mas aqui era algo extremamente simples.</p><p>Espero que tenha gostado! Compartilhe essa postagem com seus amigos e colegas de trabalho! Vou ficando por aqui, até a próxima!</p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="validador" term="validador"/>
        <category label="javascript" term="javascript"/>
        <category label="every" term="every"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Aprenda a criar snippets no VS Code]]></title>
        <id>aprenda-a-criar-snippets-no-vscode</id>
        <link href="https://mrbrunelli.github.io/blog/en/aprenda-a-criar-snippets-no-vscode"/>
        <updated>2022-02-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hoje quero compartilhar com vocês algo bem bacana, que é criar seus próprios snippets no VS Code...]]></summary>
        <content type="html"><![CDATA[<p>Salve galera, tudo bem?</p><p>Hoje quero compartilhar com vocês algo bem bacana, que é criar seus próprios snippets no VS Code.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="o-que-é-um-snippet">O que é um Snippet?<a class="hash-link" href="#o-que-é-um-snippet" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="um-atalho">Um atalho<a class="hash-link" href="#um-atalho" title="Direct link to heading">​</a></h3><p>Nada mais é que um atalho para a criação de um trecho de código. Pense em um código simples como esse:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Lógica de um loop no Javascript</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> item </span><span class="token keyword" style="color:#00009f">of</span><span class="token plain"> items</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">item</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Esse tipo de código tende a se repetir muito durante nosso desenvolvimento rotineiro. Com isso, pode ficar chato escrever a mesma sintaxe toda vez.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="produtividade">Produtividade<a class="hash-link" href="#produtividade" title="Direct link to heading">​</a></h3><p>É ai que a mágica acontece! Que tal digitiar apenas <code>newfor</code> e o VS Code criá-lo para você? Sim é possível!</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="vamos-começar">Vamos começar<a class="hash-link" href="#vamos-começar" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="primeiro-passo">Primeiro passo<a class="hash-link" href="#primeiro-passo" title="Direct link to heading">​</a></h3><p>Vamos criar o arquivo principal para nossos snippets.</p><p>Com seu VS Code aberto, digite <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> e digite <strong>snippets</strong> na barra que apareceu, selecione a opção <strong>Preferences: Configure User Snippets</strong> e depois <strong>New Global Snippet File</strong>.</p><p>Abrirá uma caixinha para você digitar o nome do seu arquivo de snippets. Você pode colocar qualquer nome, eu vou colocar <strong>my-snippets</strong>.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="segundo-passo">Segundo passo<a class="hash-link" href="#segundo-passo" title="Direct link to heading">​</a></h3><p>Vai abrir um arquivo mais ou menos assim:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">my-snippets.code-snippets</div><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Placeholders with the same ids are connected.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Example:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// "Print to console": {</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//    "scope": "javascript,typescript",</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//    "prefix": "log",</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//    "body": [</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//        "console.log('$1');",</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//        "$2"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//    ],</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">//    "description": "Log output to console"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Apague tudo e monte essa estrutura:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">my-snippets.code-snippets</div><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"newfor"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"scope"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"prefix"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"body"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"description"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="significado-de-cada-atributo">Significado de cada atributo<a class="hash-link" href="#significado-de-cada-atributo" title="Direct link to heading">​</a></h4><ul><li><strong>newfor</strong>: é o nome do nosso snippet</li><li><strong>scope</strong>: em quais tipos de arquivos seu snippet executará</li><li><strong>prefix</strong>: atalho para seu snippet</li><li><strong>body</strong>: linhas que seu snippet irá gerar</li><li><strong>description</strong>: descrição do que seu snippet irá gerar (não obrigatório)</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="terceiro-passo">Terceiro passo<a class="hash-link" href="#terceiro-passo" title="Direct link to heading">​</a></h3><p>Agora que sabemos o que cada campo significa, vamos preenche-los com nosso código:</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">my-snippets.code-snippets</div><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"newfor"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"scope"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"javascript, typescript"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"prefix"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"newfor"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"body"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"for (const item of items) {"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"console.log(item)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"}"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"description"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cria um loop com for"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="quarto-passo">Quarto passo<a class="hash-link" href="#quarto-passo" title="Direct link to heading">​</a></h3><p>Pronto, salve o seu arquivo de snippet, vá para um arquivo <strong>.js</strong> ou <strong>.ts</strong> e faça o teste. Digite <code>newfor</code> e aperte <kbd>Ctrl</kbd>+ <kbd>Space bar</kbd>.</p><p>Deverá aparecer o nome do seu snippet no autocomplete, dessa forma:
<img src="/blog/en/assets/images/screenshot-7ad2bca9428a144f3f9b32757bc20f64.png" width="609" height="160"></p><p>Só apertar <kbd>Enter</kbd> que seu código será gerado. Legal né?</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="conclusão">Conclusão<a class="hash-link" href="#conclusão" title="Direct link to heading">​</a></h2><p>Caso você tenha chegado até aqui e não tenha funcionado, volte desde o começo e tente novamente com calma, você deve ter deixado algo passar. É bem simples.</p><p>Espero que tenha gostado! Se foi útil para você, compartilhe com seus amigos e colegas de trabalho!</p><p>Até a próxima!</p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="snippets" term="snippets"/>
        <category label="vscode" term="vscode"/>
        <category label="produtividade" term="produtividade"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Criando atalhos para o git]]></title>
        <id>criando-atalhos-para-o-git</id>
        <link href="https://mrbrunelli.github.io/blog/en/criando-atalhos-para-o-git"/>
        <updated>2022-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hoje vou ensinar como criar atalhos para o git que vão aumentar tua produtividade. Sem muita enrolação, vamos direto para a prática...]]></summary>
        <content type="html"><![CDATA[<p><img alt="Git Logo" src="/blog/en/assets/images/git-1f46a94b6c9349272b34d93d86a960f6.jpg" width="1397" height="353"></p><p>Olá, tudo bem?</p><p>Hoje vou ensinar como criar atalhos para o <strong>git</strong> que vão aumentar tua produtividade.
Sem muita enrolação, vamos direto para a prática.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="escolher-o-editor-de-textos-padrão">Escolher o editor de textos padrão<a class="hash-link" href="#escolher-o-editor-de-textos-padrão" title="Direct link to heading">​</a></h2><p>Antes de começar, é bom configurar o editor de texto de sua preferência. Eu vou utilizar o <a href="https://www.vim.org/" target="_blank" rel="noopener noreferrer">Vim</a>, mas você pode utilizar o Code, Nano etc.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="configurar-editor">Configurar editor<a class="hash-link" href="#configurar-editor" title="Direct link to heading">​</a></h3><p>Subistitua o <strong>"vim"</strong> pelo editor de sua preferencia. Segue a lista dos mais utilizados:</p><ul><li>vim</li><li>nano</li><li>code</li><li>gedit</li></ul><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Definir editor padrão</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global core.editor </span><span class="token function" style="color:#d73a49">vim</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="prontos-para-começar">Prontos para começar<a class="hash-link" href="#prontos-para-começar" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="abrir-arquivo-de-configurações-do-git">Abrir arquivo de configurações do git<a class="hash-link" href="#abrir-arquivo-de-configurações-do-git" title="Direct link to heading">​</a></h3><p>Isso abritá seu arquivo de configurações do git em seu editor de texto.</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Abrindo meu arquivo de configurações</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config --global --edit</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="adicionar-usuário">Adicionar usuário<a class="hash-link" href="#adicionar-usuário" title="Direct link to heading">​</a></h3><p>É importante adicionar um usuário ao seu git config, pois ele será utilizado em seus commits.</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Configurando meu git</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> meu_email@mail.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nome_que_aparecera_nos_commits</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="atalhos">Atalhos<a class="hash-link" href="#atalhos" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="git-status">git status<a class="hash-link" href="#git-status" title="Direct link to heading">​</a></h3><p>Vamos definir nosso primeiro atalho, o <code>git status -s</code>. Esse comando exibe o status atual da sua <strong>stage area</strong>, quais arquivos estão commitados, e quais foram modificados.</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Configurando meu git</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> meu_email@mail.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nome_que_aparecera_nos_commits</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">alias</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git status -s</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Agora o status dos seus commits ficarão mais clean.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="git-add--git-commit">git add &amp;&amp; git commit<a class="hash-link" href="#git-add--git-commit" title="Direct link to heading">​</a></h3><p>Esses dois são muito utilizados, que tal torná-los em um único comando?</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Configurando meu git</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> meu_email@mail.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nome_que_aparecera_nos_commits</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">alias</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git status -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> --all </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Agora quando digitarmos <code>git c</code> em nosso terminal, nosso <strong>alias</strong> irá adicionar e commitar ao mesmo tempo, só vamos precisar informar a mensagem. Exemplo:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Configurando meu git</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> c </span><span class="token string" style="color:#e3116c">'feat: agora ficou mais fácil!'</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="git-pullpush-origin-head">git pull/push origin HEAD<a class="hash-link" href="#git-pullpush-origin-head" title="Direct link to heading">​</a></h3><p>Outro comando muito utilizado. Vamos simplificá-lo.</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Configurando meu git</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> meu_email@mail.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nome_que_aparecera_nos_commits</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">alias</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git status -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> --all </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pullo </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git pull origin HEAD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pusho </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git push origin HEAD</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Agora podemos usar essa combinação:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> c </span><span class="token string" style="color:#e3116c">'feat: adicionar simplicidade'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> pusho</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="git-log">git log<a class="hash-link" href="#git-log" title="Direct link to heading">​</a></h3><p>Quem nunca se perdeu ao utilizar um <code>git log</code>? São muitas informações de uma vez. Vamos simplificar:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">Configurando meu git</div><div class="codeBlockContent_wNvx bash"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    email </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> meu_email@mail.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nome_que_aparecera_nos_commits</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">alias</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git status -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git </span><span class="token function" style="color:#d73a49">add</span><span class="token plain"> --all </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> commit -m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pullo </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git pull origin HEAD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pusho </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git push origin HEAD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">git log --pretty</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">format:</span><span class="token string" style="color:#e3116c">'%h %s %cn %cr'</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h4 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="vamos-entender-o-que-fizemos">Vamos entender o que fizemos<a class="hash-link" href="#vamos-entender-o-que-fizemos" title="Direct link to heading">​</a></h4><ul><li><strong>%h</strong>: id do commit (hash)</li><li><strong>%s</strong>: mensagem do commit</li><li><strong>%cn</strong>: autor do commit</li><li><strong>%cr</strong>: quanto tempo desde o commit</li></ul><p>Agora seu <code>git l</code> retornará os dados do commit de uma forma bem resumida. Também dá pra mudar a cor, vou deixar a documentação logo abaixo pra você consultar.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="links-úteis">Links úteis<a class="hash-link" href="#links-úteis" title="Direct link to heading">​</a></h2><ul><li><a href="https://git-scm.com/docs/pretty-formats" target="_blank" rel="noopener noreferrer">Pretty format</a></li><li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration" target="_blank" rel="noopener noreferrer">Git config</a></li></ul><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="conclusão">Conclusão<a class="hash-link" href="#conclusão" title="Direct link to heading">​</a></h2><p>Não existe limites, podemos combinar vários comandos e simplificar nossa rotina. Agora você pode brincar e criar seus próprios atalhos!</p><p>Espero que tenha gostado! Se te ajudou de alguma maneira, compartilhe com seus amigos e colegas de trabalho!</p><p>Até a próxima!</p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="git" term="git"/>
        <category label="aliases" term="aliases"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Como contornar a dor de escrever um teste unitário?]]></title>
        <id>como-contornar-a-dor-de-escrever-um-teste-unitário</id>
        <link href="https://mrbrunelli.github.io/blog/en/como-contornar-a-dor-de-escrever-um-teste-unitário"/>
        <updated>2021-12-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Acredito que todo mundo concorda que um código sem testes, é um código instável e frágil à mudanças...]]></summary>
        <content type="html"><![CDATA[<p><img alt="TDD Banner" src="/blog/en/assets/images/tdd-fbd2a93ec4b76fcef18c1b3a10e68bbf.jpeg" width="535" height="311"></p><p>Salve galera, tudo tranquilo? Esse é meu segundo artigo, e gostaria de compartilhar algo que vem me ajudando muito durante o desenvolvimento de software e na minha própria evolução profissional.</p><p>Estou falando sobre os <strong>testes unitários</strong>. Acredito que todo mundo concorda que um código sem testes, é um código instável e frágil à mudanças. É muito ruim programar no escuro, nós nunca temos certeza que o que estamos desenvolvendo irá funcionar em produção, sem conflitar com as features já existentes.</p><p>Por outro lado, escrever testes para uma feature já implementada pode ser algo muito doloroso, por isso <strong>muita gente prefere correr o risco e deixar o código sem cobertura.</strong></p><p>Mas recentemente venho estudando fortemente uma metodologia que abriu minha mente, o <strong>TDD</strong>, ou em português <strong>"Desenvolvimento guiado por testes"</strong>. No TDD nós criamos o teste primeiro, e só depois criamos a implementação de fato, que fará o teste passar. Isso faz com que nosso código sempre esteja coberto por testes.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="traduzindo">Traduzindo<a class="hash-link" href="#traduzindo" title="Direct link to heading">​</a></h2><p>Se eu quisesse criar uma função que me retornasse o maior número de uma lista em Javascript, utilizando o <strong>TDD</strong> (escrevendo o teste primeiro), eu começaria fazendo algo mais ou menos assim:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">pegueOMaiorNumero.test.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Sintaxe de um framework de testes do Javascript</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"pegueOMaiorNumero"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"deve retornar o maior número de uma lista"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> maiorNumero </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pegueOMaiorNumero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maiorNumero</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Nesse caso, eu forneci uma lista com alguns números, onde o 21 é o maior deles. Mas note que em nenhum momento foi criada a função <strong>pegueOMaiorNumero</strong>. Estou invocando uma função que <strong>ainda não foi criada</strong>, e ainda estou esperando que o resultado seja 21. Nesse caso o teste irá falhar.</p><p>É ai que a brincadeira começa. Quando o teste falha, é sinal de que precisamos implementar a feature que faça esse teste passar.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="então-vamos-lá">Então vamos lá!<a class="hash-link" href="#então-vamos-lá" title="Direct link to heading">​</a></h2><p>Vou criar a função que fará o teste passar:</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">pegueOMaiorNumero.test.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">pegueOMaiorNumero</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">numeros</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> maior </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numeros</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numeros</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maior</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      maior </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numeros</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> maior</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"pegueOMaiorNumero"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"deve retornar o maior número de uma lista"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> maiorNumero </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pegueOMaiorNumero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maiorNumero</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Agora o teste começará a passar. Veja que o algoritmo não ficou dos melhores, mas conseguiu satisfazer o que o teste pediu. Agora que o teste está passando, posso refatorar a função <strong>pegueOMaiorNumero</strong> sem medo, pois ela está coberta por um teste. Caso a função passe a retornar uma string, null, ou um número que não seja o maior, <strong>o teste irá me avisar, reprovando</strong>.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="vamos-refatorar-sem-medo">Vamos refatorar, sem medo!<a class="hash-link" href="#vamos-refatorar-sem-medo" title="Direct link to heading">​</a></h2><div class="codeBlockContainer_I0IT language-js theme-code-block"><div style="color:#393A34;background-color:#f6f8fa" class="codeBlockTitle_BvAR">pegueOMaiorNumero.test.js</div><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">pegueOMaiorNumero</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">numeros</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">max</span><span class="token punctuation" style="color:#393A34">(</span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">numeros</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">describe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"pegueOMaiorNumero"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"deve retornar o maior número de uma lista"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> maiorNumero </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pegueOMaiorNumero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">expect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maiorNumero</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toBe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Pronto, se a gente rodar esse teste, ele irá continuar passando, pois o <strong>Math.max</strong> está fazendo o mesmo que o <strong>laço de repetição</strong> estava fazendo anteriormente, mas de uma maneira mais enxuta. O fato é que, temos confiança de alterar um código que nos fale se a nossa regra de negócios falhou. <strong>É inadmissível</strong> que nossa função <strong>pegueOMariorNumero</strong> retorne um número que não é o maior.</p><h2 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="conclusão">Conclusão<a class="hash-link" href="#conclusão" title="Direct link to heading">​</a></h2><p>Nossa simples feature de retornar o maior número, <strong>esteve durante todo o tempo de desenvolvimento coberta por um teste</strong>. Se a gente fizesse a feature primeiro ao invés do teste, teríamos que testá-la manualmente a cada alteração, printando o resultado no console, até de fato escrever um teste pra ela. Isso seria <strong>cansativo</strong>. O teste é automatizado, ou seja, escrevemos uma única vez, e ele sempre irá assegurar o resultado pra gente.</p><p>Escolhi esse exemplo de algoritmo, pois há várias formas de implementá-lo. Caso você descubra alguma forma mais enxuta que essa apresentada, poderá implementar sem correr o risco de quebrar sua aplicação.</p><p>Como material complementar, recomendo essa live que aconteceu no dia 09/12/2021, e que considero excepcional por <strong>dois motivos: não tem enrolação, e os caras sabem o que estão ensinando.</strong> Por hoje é isso, forte abraço e até a próxima!</p><p><a href="https://youtu.be/sg1zFpNM5Jw" target="_blank" rel="noopener noreferrer"><img src="https://img.youtube.com/vi/sg1zFpNM5Jw/0.jpg" alt="Live TDD na prática - Diego Fernandes e Rodrigo Manguinho"></a></p><ul><li>Repositório código fonte: <a href="https://github.com/mrbrunelli/tdd-pega-o-maior-numero" target="_blank" rel="noopener noreferrer">https://github.com/mrbrunelli/tdd-pega-o-maior-numero</a></li></ul>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="tdd" term="tdd"/>
        <category label="testes" term="testes"/>
        <category label="teste unitário" term="teste unitário"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[O impacto da educação em minha vida]]></title>
        <id>o-impacto-da-educação-em-minha-vida</id>
        <link href="https://mrbrunelli.github.io/blog/en/o-impacto-da-educação-em-minha-vida"/>
        <updated>2021-05-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Meu último emprego antes de me tornar Desenvolvedor em 2019 era de Auxiliar de Produção em uma fábrica aqui da cidade...]]></summary>
        <content type="html"><![CDATA[<p><img alt="Education Banner" src="/blog/en/assets/images/education-b10b3c1f8adccbed991bcf30d07ae738.jpeg" width="1400" height="600"></p><p>Ontem enquanto organizava minha gaveta, me deparei com minha certidão de casamento, onde estava escrito na primeira linha:</p><blockquote><p>MATHEUS RICARDO BRUNELLI, brasileiro, de profissão: Auxiliar de Produção. Ano 2018.</p></blockquote><p>Meu último emprego antes de me tornar Desenvolvedor em 2019 era de Auxiliar de Produção em uma fábrica aqui da cidade. O trabalho era muito simples, porem muito desgastante, Dorflex e Torsilax (não é propaganda) faziam parte da minha intensa semana.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="tecnologia-uma-realidade-crescente">Tecnologia, uma realidade crescente<a class="hash-link" href="#tecnologia-uma-realidade-crescente" title="Direct link to heading">​</a></h3><p>Certo dia a fábrica inteira parou para ouvir o anúncio dos coordenadores das faculdades da região, e foi anunciado dentre os demais cursos o curso de Sistemas para Internet, e a fala do coordenador <a href="https://www.linkedin.com/in/profburnes" target="_blank" rel="noopener noreferrer">Anderson Burnes</a> (que eu já conhecia) foi muito convincente, pois naquele ano várias empresas estavam passando por transformações digitais, e estavam precisando de desenvolvedores qualificados, e os salários eram bem diferentes da minha realidade.</p><p>Eu trabalhava muito para conseguir sustentar a minha família (eu, esposa e os doguinhos) e mesmo assim não era suficiente, um pneu furado ou uma gripe eram suficientes para acabar com nossas economias do mês rsrs.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="educação-um-investimento-muito-rentável">Educação, um investimento muito rentável<a class="hash-link" href="#educação-um-investimento-muito-rentável" title="Direct link to heading">​</a></h3><p>Eu sabia que o único caminho para uma mudança de vida, era através da educação. E naquele ano estudei muito para o Enem, e consegui uma Bolsa ProUni para o curso de Sistemas para Internet na <a href="https://www.alfaumuarama.edu.br/fau" target="_blank" rel="noopener noreferrer">UniAlfa</a>.</p><p>Me lembro que dessa vez eu não estava apenas fazendo um curso por fazer, eu estava colocando todas minhas energias em algo que eu acreditava poder mudar minha vida.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="esforço-no-lugar-certo">Esforço no lugar certo<a class="hash-link" href="#esforço-no-lugar-certo" title="Direct link to heading">​</a></h3><p>Durante os primeiros semestres, percebi que existiam muitos caminhos para seguir profissão, alguns bem confusos, e eu precisaria ter foco em algo para poder me destacar. Comecei a pesquisar por tecnologias que me ajudariam a entrar no mercado mais rápido, pois essa era minha maior motivação.</p><p>Quando obtive um mínimo de confiança nessas tecnologias, pedi demissão do meu emprego na fábrica, para que eu pudesse me dedicar aos estudos de forma integral. Minha família ficou com muito medo da minha decisão, afinal, não haviam garantias que eu conseguiria entrar na área, antes da nossa minúscula reserva financeira acabar.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="fé-foco-e-medo">Fé, foco e medo<a class="hash-link" href="#fé-foco-e-medo" title="Direct link to heading">​</a></h3><p>Foram esses três elementos que me acompanharam nessa transição. Fé porque nós não enxergamos o amanhã. Foco porque o tempo é escasso. Medo porque ele funciona como uma balança, quanto mais arriscado, mais sentimos medo.</p><p>Como todo trabalhado duro traz recompensas, a minha chegou aos 45 do segundo tempo, quando só restavam algumas moedinhas no cofre. Consegui meu primeiro emprego na área, graças ao networking (vou escrever um artigo só desse cara) e ao meu esforço é claro.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="mercado-aquecido">Mercado aquecido<a class="hash-link" href="#mercado-aquecido" title="Direct link to heading">​</a></h3><p>Se eu pudesse deixar um conselho para quem está começando, seria:</p><blockquote><p>Estude, e faça de tudo para tentar entrar no mercado. Tenha foco, e invista seu tempo estudando o que te dará retorno.</p></blockquote><p>Nem só de teoria vive o programador. Essa é uma profissão muito prática, quanto mais se exercita, mais se aprende. Os melhores exercícios são os problemas reais de uma empresa. Mesmo que ganhando pouco no começo, trabalhar com problemas reais não tem preço, essa experiência não pode ser adquirida de outra forma.</p><h3 class="anchor anchorWithHideOnScrollNavbar_R0VQ" id="considerações-finais">Considerações finais<a class="hash-link" href="#considerações-finais" title="Direct link to heading">​</a></h3><p>Esse foi meu primeiro artigo, fiquei muito empolgado ao escrevê-lo. Se você chegou até aqui, meus agradecimentos. Espero que tenha sido útil para você.</p><p>Forte abraço, e até o próximo artigo!</p>]]></content>
        <author>
            <name>Matheus R. Brunelli</name>
            <uri>https://github.com/mrbrunelli</uri>
        </author>
        <category label="educação" term="educação"/>
        <category label="a importância da educação" term="a importância da educação"/>
        <category label="aprendizado" term="aprendizado"/>
    </entry>
</feed>