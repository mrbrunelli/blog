"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6403],{637:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"dicas-para-melhorar-as-chances-em-entrevistas","metadata":{"permalink":"/blog/en/dicas-para-melhorar-as-chances-em-entrevistas","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2023-06-12-dicas-para-melhorar-as-chances-em-entrevistas/index.md","source":"@site/blog/2023-06-12-dicas-para-melhorar-as-chances-em-entrevistas/index.md","title":"Dicas para melhorar as chances em entrevistas","description":"Como melhorar as chances em uma entrevista?","date":"2023-06-12T00:00:00.000Z","formattedDate":"June 12, 2023","tags":[{"label":"carreira","permalink":"/blog/en/tags/carreira"},{"label":"entrevista","permalink":"/blog/en/tags/entrevista"},{"label":"dicas","permalink":"/blog/en/tags/dicas"}],"readingTime":2.835,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"dicas-para-melhorar-as-chances-em-entrevistas","title":"Dicas para melhorar as chances em entrevistas","description":"Como melhorar as chances em uma entrevista?","keywords":["carreira","entrevista","dicas"],"image":"/img/people-talking.jpeg","tags":["carreira","entrevista","dicas"],"authors":"brunelli"},"nextItem":{"title":"Aprenda a escrever testes - Parte 2","permalink":"/blog/en/aprenda-a-testar-pt2"}},"content":"Como melhorar as chances em uma entrevista? Depois de fazer dezenas delas, tanto como candidato quanto entrevistador, percebi um certo padr\xe3o em entrevistas que foram bem sucedidas, e tamb\xe9m em entrevistas que n\xe3o foram.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Negocia\xe7\xe3o\\n\\nEntrevista n\xe3o \xe9 apenas uma triagem com mon\xf3logo, onde o entrevistador faz uma s\xe9rie de quiz ao candidato, e este s\xf3 acena com a cabe\xe7a. A entrevista \xe9 o momento onde ambas as partes ir\xe3o se conhecer e negociar, o candidato ir\xe1 oferecer os seus servi\xe7os e habilidades em troca de um sal\xe1rio. Se ambos est\xe3o nessa etapa, ent\xe3o ambos est\xe3o interessados, ou pelo menos deveriam.\\n\\n### Pergunte\\n\\n\xc9 importante que o candidato fa\xe7a perguntas sobre a empresa, e que n\xe3o seja passivo durante a conversa. Talvez esse seja um dos maiores erros que os candidatos cometam.\\n\\nPerguntar sobre o futuro local de trabalho n\xe3o deveria ser um tabu. Algumas das perguntas que podem ajudar a conhecer melhor a empresa:\\n\\n- Qual a faixa salarial para essa vaga?\\n- Quantos candidatos est\xe3o concorrendo comigo?\\n- Como a empresa lida com horas extras? As pessoas trabalham mais que o combinado?\\n- Como tem sido as \xfaltimas entregas? Houveram muitos atrasos? Se sim, por qu\xea?\\n- Cite 3 pontos que fazem voc\xea amar seu trabalho.\\n- Cite 3 pontos que fazem voc\xea pensar em trocar de emprego.\\n- Quais os objetivos da empresa para os pr\xf3ximos 5 anos?\\n- Qual foi o crescimento da empresa no \xfaltimo ano?\\n\\nAs perguntas n\xe3o precisam ser exatamente essas, o que importa aqui \xe9 colher o m\xe1ximo de informa\xe7\xf5es sobre o local de trabalho, e caso n\xe3o seja do seu interesse, poder\xe1 agradecer e encerrar a entrevista.\\n\\n### Direto ao ponto\\n\\nNem sempre o recrutador conduzir\xe1 bem a entrevista, ent\xe3o ele pode acabar te dando corda demais e voc\xea come\xe7ar a falar sem parar. Procure n\xe3o falar de coisas que n\xe3o ir\xe3o agregar para a entrevista. Falar demais n\xe3o significa que voc\xea est\xe1 indo bem. Responda bem as perguntas, e se necess\xe1rio pe\xe7a para o recrutador reformular a pergunta.\\n\\n### Autopromo\xe7\xe3o\\n\\nDeixe claro o que voc\xea faz bem, em outras palavras, destaque as suas habilidades. Se voc\xea \xe9 bom em fazer a atividade X, ent\xe3o fale disso sem vergonha. O recrutador precisa entender que voc\xea \xe9 realmente bom nisso, ele n\xe3o tem bola de cristal.\\n\\n## Lista de requisitos\\n\\nGeralmente a lista de requisitos das vagas \xe9 extensa, e dificilmente algu\xe9m ter\xe1 dom\xednio sobre todas elas, e isso \xe9 proposital. Muita gente deixa de aplicar para a vaga s\xf3 de olhar a lista de requisitos, e com isso uma grande parcela de curiosos j\xe1 caem fora.\\n\\n### Arrisque\\n\\nO candidato deve arriscar mesmo que n\xe3o cumpra toda a lista de requisitos, e eu vou explicar o porqu\xea. Imagine que a vaga tenha 7 requisitos, e algu\xe9m se candidata com apenas 4 dos 7 requisitos, se voc\xea tiver 5 requisitos, j\xe1 estar\xe1 em vantagem.\\n\\nSe o recrutador n\xe3o encontrar algu\xe9m melhor do que voc\xea e com mais requisitos preenchidos, voc\xea ser\xe1 escolhido. Portanto, as suas chances aumentam quando voc\xea se candidata.\\n\\n## Mais algumas considera\xe7\xf5es\\n\\nN\xe3o faz sentido n\xe3o fazer v\xe1rios processos ao mesmo tempo, a n\xe3o ser que voc\xea tenha um objetivo espec\xedfico. Do contr\xe1rio, quanto mais entrevistas, maiores ser\xe3o as chances. A melhor coisa \xe9 ser aprovado em mais de uma vaga e poder renegociar as condi\xe7\xf5es, e escolher a que mais gostou."},{"id":"aprenda-a-testar-pt2","metadata":{"permalink":"/blog/en/aprenda-a-testar-pt2","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2022-10-19-aprenda-a-testar-pt2/index.md","source":"@site/blog/2022-10-19-aprenda-a-testar-pt2/index.md","title":"Aprenda a escrever testes - Parte 2","description":"Como utilizar um framework de testes no Node?","date":"2022-10-19T00:00:00.000Z","formattedDate":"October 19, 2022","tags":[{"label":"teste","permalink":"/blog/en/tags/teste"},{"label":"cobertura","permalink":"/blog/en/tags/cobertura"},{"label":"qualidade","permalink":"/blog/en/tags/qualidade"},{"label":"testes automatizados","permalink":"/blog/en/tags/testes-automatizados"},{"label":"vitest","permalink":"/blog/en/tags/vitest"}],"readingTime":4.135,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"aprenda-a-testar-pt2","title":"Aprenda a escrever testes - Parte 2","description":"Como utilizar um framework de testes no Node?","keywords":["teste","cobertura","qualidade","testes automatizados","vitest"],"image":"/img/test.jpg","tags":["teste","cobertura","qualidade","testes automatizados","vitest"],"authors":"brunelli"},"prevItem":{"title":"Dicas para melhorar as chances em entrevistas","permalink":"/blog/en/dicas-para-melhorar-as-chances-em-entrevistas"},"nextItem":{"title":"Aprenda a escrever testes - Parte 1","permalink":"/blog/en/aprenda-a-testar-pt1"}},"content":"Como configurar e utilizar um framework de testes no Node utilizando Typescript? Temos v\xe1rias op\xe7\xf5es excelentes para isso, e por esse motivo irei escolher a mais f\xe1cil para o cen\xe1rio de Node + Typescript.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Como escolher um framework de testes?\\n\\nPrimeiro devo avaliar quais os cen\xe1rios quero testar, se \xe9 frontend ou backend, e se vou utilizar Javascript ou Typescript.\\n\\nVou utilizar Node + Typescript nos exemplos, e isso faz a minha lista ficar restrita a alguns nomes:\\n\\n- [Jest](https://jestjs.io/pt-BR/)\\n- [Mocha](https://mochajs.org/)\\n- [Vitest](https://vitest.dev/)\\n\\n> Jest e Mocha necessitam de um parser de Typescript para executar, como o ts-jest ou ts-node, o que pode complicar para quem est\xe1 come\xe7ando, j\xe1 que o arquivo de configura\xe7\xe3o fica muito complexo nesses cen\xe1rios.\\n\\nN\xe3o quero abrir m\xe3o do Typescript e nem da facilidade de configura\xe7\xe3o, ent\xe3o irei escolher o Vitest. Na p\xe1gina inicial do Vitest cont\xe9m o [Get Started](https://vitest.dev/guide/) contendo alguns exemplos de instala\xe7\xe3o e configura\xe7\xe3o.\\n\\n## Configurando o projeto\\n\\n### Setup Node + Typescript\\n\\nVou criar uma pasta vazia, com um nome qualquer.\\n\\n```sh\\nmkdir vitest-typescript-example\\n```\\n\\nCom o meu Visual Studio Code aberto nessa pasta, vou abrir um terminal integrado e iniciar o Node, e instalar as depend\xeancias b\xe1sicas para o Typescript funcionar.\\n\\n```sh\\nnpm init -y\\n\\nnpm install -D typescript @types/node\\n```\\n\\nAgora vou criar o tsconfig.json, que \xe9 o arquivo de configura\xe7\xe3o do Typescript. Ele ir\xe1 gerar uma configura\xe7\xe3o default, e vou manter ela.\\n\\n```sh\\nnpx tsc --init\\n```\\n\\nPronto, meu projeto j\xe1 est\xe1 configurado com Node + Typescript.\\n\\n### Setup Vitest\\n\\nAgora vou instalar o Vitest como depend\xeancia de desenvolvimento.\\n\\n```sh\\nnpm install -D vitest\\n```\\n\\nO Vitest precisa de um arquivo de configura\xe7\xe3o para poder executar. Na pr\xf3pria documenta\xe7\xe3o tem um exemplo simples. Vou criar um arquivo **vitest.config.ts** na raiz, e adicionar a configura\xe7\xe3o b\xe1sica.\\n\\n```ts title=\\"vitest.config.ts\\"\\nimport { defineConfig } from \\"vitest/config\\";\\n\\nexport default defineConfig({\\n  test: {\\n    reporters: \\"verbose\\",\\n  },\\n});\\n```\\n\\nVeja como o arquivo de configura\xe7\xe3o \xe9 enxuto, bem diferente dos outros frameworks citados no come\xe7o do post. [Na documenta\xe7\xe3o tenho acesso a API](https://vitest.dev/config/), e como posso personalizar o **defineConfig()**. N\xe3o vou configurar nada extra, j\xe1 est\xe1 \xf3timo como est\xe1.\\n\\n> Veja que configurei **reporters** como **verbose**, isso para que eu possa obter todas as informa\xe7\xf5es do teste no terminal.\\n\\n### Configurando o package.json\\n\\nQuando eu executei o **npm init -y**, foi gerado um arquivo **package.json** na raiz, com algumas configura\xe7\xf5es bem simples. Dentro de **scripts** tem um script **test**. Vou edit\xe1-lo.\\n\\n```json title=\\"package.json\\"\\n...\\n\\"scripts\\": {\\n    \\"test\\": \\"vitest --run\\"\\n}\\n...\\n```\\n\\n> Agora quando eu executar `npm run test` no terminal, o vitest ir\xe1 executar meus testes. Como n\xe3o temos nenhum teste no momento, ele tentar\xe1 rodar e retornar\xe1 um erro dizendo que nenhum teste foi encontrado.\\n\\n## Escrevendo o primeiro teste\\n\\nVou criar uma pasta **test** na raiz, e criar um arquivo chamado **primeiro-teste.test.ts** dentro dela. Em seguida irei adicionar alguns cen\xe1rios.\\n\\n> \xc9 importante respeitar a extens\xe3o **.test.ts**, pois o Vitest procura por essa extens\xe3o durante a execu\xe7\xe3o.\\n\\n```ts title=\\"primeiro-teste.test.ts\\"\\nimport { describe, test, expect } from \\"vitest\\";\\n\\ndescribe(\\"Cont\xe9m um conjunto de testes, que ser\xe1 executado um a um\\", () => {\\n  test(\\"Deve somar 20 + 50 e retornar 70\\", () => {\\n    expect(20 + 50).toBe(70);\\n  });\\n\\n  test(\\"Deve concatenar a palavra \'Ol\xe1\' com a palavra \'Mundo\' e retornar \'Ol\xe1 Mundo\'\\", () => {\\n    expect(\\"Ol\xe1 \\" + \\"Mundo\\").toBe(\\"Ol\xe1 Mundo\\");\\n  });\\n\\n  test(\\"Deve retornar que o Palmeiras n\xe3o tem mundial\\", () => {\\n    const temMundial = false;\\n    expect(temMundial).toBeFalsy();\\n  });\\n\\n  test(\\"Deve conter todos os valores do objeto fornecido\\", () => {\\n    const meuObjeto = {\\n      nome: \\"Palmeiras\\",\\n      temMundial: false,\\n      cor: \\"Verde\\",\\n    };\\n    expect(meuObjeto).toEqual({\\n      nome: \\"Palmeiras\\",\\n      temMundial: false,\\n      cor: \\"Verde\\",\\n    });\\n  });\\n});\\n```\\n\\nAgora vou abrir o terminal e executar `npm run test`, e o Vitest ir\xe1 executar e retornar todos esses cen\xe1rios no terminal, verde caso tenha passado, e vermelho caso tenha reprovado algum.\\n\\n### Sucesso\\n\\n![](vitest-sucess.png)\\n\\n### Erro\\n\\nAdicionei um campo a mais no objeto do \xfaltimo teste, **por\xe9m n\xe3o adicionei no expect**, logo o teste fez a compara\xe7\xe3o e reprovou, pois os objetos n\xe3o s\xe3o mais iguais.\\n\\n> Veja como a inteface \xe9 amig\xe1vel, ela exibe com muita clareza qual teste reprovou e o motivo.\\n\\n![](vitest-error.png)\\n\\n## Resumo\\n\\n- Preciso saber em qual cen\xe1rio vou escrever meus testes, se \xe9 frontend ou backend, pois cada um possu\xed a ferramenta certa para o cen\xe1rio.\\n- Se eu ainda n\xe3o sei testar, devo procurar o framework mais f\xe1cil para aprender. Nesse caso foi o Vitest, pois ele tem uma filosofia **less config**.\\n- A documenta\xe7\xe3o cont\xe9m tudo que preciso para configurar o framework, e ainda cont\xe9m v\xe1rios exemplos.\\n- O Vitest procura por arquivos que tenham a extens\xe3o **.test.ts**.\\n- Os resultados dos testes s\xe3o exibidos no terminal, de uma forma muito amig\xe1vel.\\n- Posso executar o comando `npm run test` quantas vezes quiser, e o teste executar\xe1 em mil\xe9simos de segundos.\\n- Automatizar \xe9 bem melhor que testar manualmente.\\n\\n### Reposit\xf3rio com o c\xf3digo\\n\\n[https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-2](https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-2)"},{"id":"aprenda-a-testar-pt1","metadata":{"permalink":"/blog/en/aprenda-a-testar-pt1","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2022-10-17-aprenda-a-testar-pt1/index.md","source":"@site/blog/2022-10-17-aprenda-a-testar-pt1/index.md","title":"Aprenda a escrever testes - Parte 1","description":"Para que servem os testes? Como fa\xe7o para escrever um teste?","date":"2022-10-17T00:00:00.000Z","formattedDate":"October 17, 2022","tags":[{"label":"teste","permalink":"/blog/en/tags/teste"},{"label":"cobertura","permalink":"/blog/en/tags/cobertura"},{"label":"qualidade","permalink":"/blog/en/tags/qualidade"},{"label":"testes automatizados","permalink":"/blog/en/tags/testes-automatizados"}],"readingTime":3.465,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"aprenda-a-testar-pt1","title":"Aprenda a escrever testes - Parte 1","description":"Para que servem os testes? Como fa\xe7o para escrever um teste?","keywords":["teste","cobertura","qualidade","testes automatizados"],"image":"/img/test.jpg","tags":["teste","cobertura","qualidade","testes automatizados"],"authors":"brunelli"},"prevItem":{"title":"Aprenda a escrever testes - Parte 2","permalink":"/blog/en/aprenda-a-testar-pt2"},"nextItem":{"title":"Como validar dados de uma forma elegante","permalink":"/blog/en/como-validar-dados-de-uma-forma-elegante"}},"content":"Para que servem os testes? Como fa\xe7o para escrever um teste? Esse tema ainda pode ser muito confuso para quem est\xe1 come\xe7ando a programar, e at\xe9 para quem j\xe1 possu\xed mais tempo de estrada.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Afinal, para que servem os testes?\\n\\nAntes de responder essa pergunta, vamos entender de que testes estamos falando. A primeira coisa que me vem a mente quando algu\xe9m me pede para testar a aplica\xe7\xe3o \xe9: **executar a aplica\xe7\xe3o e fazer alguma a\xe7\xe3o e ver se o resultado esperado foi alcan\xe7ado.**\\n\\nEsse conceito est\xe1 correto, e de fato isso \xe9 \\"testar a aplica\xe7\xe3o\\". Entretanto uma aplica\xe7\xe3o ir\xe1 conter muitos recursos, que se forem testadas de forma manual, levar\xe1 muito tempo e desgastar\xe1 quem est\xe1 testando. Tamb\xe9m haver\xe1 possibilidades de erros humanos durante esse processo.\\n\\n### Testes automatizados\\n\\nPara isso existem os **testes automatizados**, que \xe9 uma forma de **executar um script que ir\xe1 testar todas as a\xe7\xf5es da aplica\xe7\xe3o**, de forma autom\xe1tica, **simulando a intera\xe7\xe3o humana** e observando se **o resultado esperado foi alca\xe7ado**.\\n\\nOs benef\xedcios dessa pr\xe1tica s\xe3o muitos, visto que, se o teste \xe9 automatizado, posso execut\xe1-lo e assim esperar para ver se todas as funcionalidades do sistema **ainda est\xe3o ok e se comportando como deveriam**. Dessa forma \xe9 poss\xedvel simular toda a intera\xe7\xe3o humana em todos os m\xf3dulos do sistema, **e em poucos segundos.**\\n\\n### Requisitos para escrever um teste\\n\\nPrimeiramente devemos entender as regras de neg\xf3cio da aplica\xe7\xe3o, e saber como devem se comportar em diferentes situa\xe7\xf5es.\\n\\nVamos supor que nosso sistema recebe dois n\xfameros e retorna a soma desses n\xfameros para o usu\xe1rio. Para escrever um teste em cima dessa funcionalidade, deveremos prover **dois n\xfameros de entrada** e observar se o valor retornado **\xe9 a soma dos dois n\xfameros fornecidos**. Se o resultado de fato for a soma dos dois n\xfameros fornecidos, ent\xe3o o teste passar\xe1, do contr\xe1rio ele reprovar\xe1.\\n\\n### Exemplo 1\\n\\n```ts title=\\"calculadora.ts\\"\\nexport class Calculadora {\\n  somar(numero1: number, numero2: number) {\\n    return numero1 + numero2;\\n  }\\n}\\n```\\n\\n```ts title=\\"calculadora.test.ts\\"\\nimport { Calculadora } from \\"./calculadora\\";\\n\\ntest(\\"Deve somar 10 + 10 e retornar 20\\", () => {\\n  const calculadora = new Calculadora();\\n  const resultado = calculadora.somar(10, 10);\\n\\n  expect(resultado).toBe(20); // true, logo o teste passar\xe1.\\n});\\n```\\n\\n### Exemplo 2\\n\\nAgora, se eu alterar a regra de neg\xf3cios do m\xe9todo **somar**, e faz\xea-lo retornar a multiplica\xe7\xe3o ao inv\xe9s da soma, **nosso teste ir\xe1 reprovar**, pois ele espera que o resultado seja **20** e n\xe3o **100**.\\n\\n```ts title=\\"calculadora.ts\\"\\nexport class Calculadora {\\n  somar(numero1: number, numero2: number) {\\n    return numero1 * numero2;\\n  }\\n}\\n```\\n\\n```ts title=\\"calculadora.test.ts\\"\\nimport { Calculadora } from \\"./calculadora\\";\\n\\ntest(\\"Deve somar 10 + 10 e retornar 20\\", () => {\\n  const calculadora = new Calculadora();\\n  const resultado = calculadora.somar(10, 10);\\n\\n  console.log(resultado); // 100\\n\\n  expect(resultado).toBe(20); // 100 != 20, logo \xe9 false, o teste reprovar\xe1.\\n});\\n```\\n\\n## O que eu devo testar?\\n\\nPosso testar as regras de neg\xf3cio de uma classe **(unidade)**, a integra\xe7\xe3o de um servi\xe7o com o banco de dados **(integra\xe7\xe3o)** e o comportamento geral do sistema **(de ponta a ponta)**.\\n\\nLogo temos testes de unidade, testes de integra\xe7\xe3o e testes de ponta a ponta.\\n\\nPara que haja uma excelente cobertura, devemos utilizar todos esses tipos de testes. Alguns desenvolvedores optam por utilizar apenas um desses tipos de testes, o que pode resultar em **uma ou v\xe1rias lacunas na cobertura do sistema.**\\n\\n## Resumo\\n\\n- Testar \xe9 executar uma a\xe7\xe3o no sistema e observar se o resultado obtivo \xe9 de fato esperado.\\n- Testes automatizados excluem a necessidade de testes humanos e manuais.\\n- Os tipos de testes s\xe3o: unidade, integra\xe7\xe3o e de ponta a ponta.\\n- Testar garante que o comportamento do sistema ser\xe1 preservado. Em caso de quebra, os testes avisar\xe3o onde ocorreu a quebra.\\n- Se um sistema n\xe3o possu\xed testes automatizados, n\xe3o h\xe1 como o desenvolvedor saber se a altera\xe7\xe3o que ele fez quebrou o sistema. Ele ter\xe1 que testar manualmente, e em muitos dos casos poder\xe3o ocorrer falhas humanas e o sistema poder\xe1 ir para produ\xe7\xe3o com defeito **(em muitos casos isso pode significar preju\xedzo financeiro para a empresa, e at\xe9 fal\xeancia da mesma).**\\n\\n### Reposit\xf3rio com o c\xf3digo\\n\\n[https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-1](https://github.com/mrbrunelli/vitest-typescript-example/tree/aprenda-a-testar-parte-1)"},{"id":"como-validar-dados-de-uma-forma-elegante","metadata":{"permalink":"/blog/en/como-validar-dados-de-uma-forma-elegante","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2022-02-21-como-validar-dados-de-uma-forma-elegante/index.md","source":"@site/blog/2022-02-21-como-validar-dados-de-uma-forma-elegante/index.md","title":"Como validar dados de uma forma elegante","description":"Hoje vou ensinar uma maneira bem elegante de validar dados no Javascript. E o mais legal, usando somente os recursos nativos da linguagem!","date":"2022-02-21T00:00:00.000Z","formattedDate":"February 21, 2022","tags":[{"label":"validador","permalink":"/blog/en/tags/validador"},{"label":"javascript","permalink":"/blog/en/tags/javascript"},{"label":"every","permalink":"/blog/en/tags/every"}],"readingTime":3.72,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"como-validar-dados-de-uma-forma-elegante","title":"Como validar dados de uma forma elegante","description":"Hoje vou ensinar uma maneira bem elegante de validar dados no Javascript. E o mais legal, usando somente os recursos nativos da linguagem!","keywords":["validator","javascript","array"],"image":"/img/every.png","tags":["validador","javascript","every"],"authors":"brunelli"},"prevItem":{"title":"Aprenda a escrever testes - Parte 1","permalink":"/blog/en/aprenda-a-testar-pt1"},"nextItem":{"title":"Aprenda a criar snippets no VS Code","permalink":"/blog/en/aprenda-a-criar-snippets-no-vscode"}},"content":"Salve galera, tudo bem com voc\xeas?\\nHoje vou ensinar uma maneira bem elegante de validar dados no Javascript. E o mais legal, usando somente os recursos nativos da linguagem.\\n\\n## Entendendo o cen\xe1rio\\n\\nImagine o seguinte cen\xe1rio, voc\xea precisa construir uma API que ir\xe1 receber os dados de pessoas que querem receber notifica\xe7\xf5es regulares sobre seu cat\xe1logo de produtos.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Requisitos\\n\\nPara sua regra de neg\xf3cios funcionar, voc\xea ir\xe1 precisar dos seguintes requisitos:\\n\\n- Sua API deve ser constru\xedda da forma mais simples poss\xedvel, se poss\xedvel uma [Lambda](https://aws.amazon.com/pt/lambda/).\\n- A rota deve ser do tipo POST.\\n- Receber do cliente nome, sobrenome, email e o cep.\\n- Todos os dados s\xe3o obrigat\xf3rios.\\n\\n## Implementa\xe7\xe3o do endpoint\\n\\nVamos pular toda a parte da constru\xe7\xe3o da API. Vamos prosseguir como se toda a infraestrutura j\xe1 estivesse montada. Algo mais ou menos assim:\\n\\n```js title=\\"subscribers.js\\"\\nexports.subscribers = async (req, res) => {\\n  try {\\n    const { first_name, last_name, email, cep } = red.body;\\n\\n    await subscribersRepository.insert({\\n      first_name,\\n      last_name,\\n      email,\\n      cep,\\n    });\\n\\n    return res.status(200).json({\\n      message:\\n        \\"Obrigado por assinar nosso cat\xe1logo! Em breve enviaremos a edi\xe7\xe3o desse m\xeas por e-mail.\\",\\n    });\\n  } catch (error) {\\n    return res.status(400).json({\\n      message: error.message,\\n    });\\n  }\\n};\\n```\\n\\nLembra que eu disse que os dados do cliente devem ser obrigat\xf3rios? Em nenhum momento n\xf3s estamos validando isso. Da maneira como os dados est\xe3o vindo, estou repassando para meu repository.\\n\\n## Possibilidades\\n\\n### Condicionais: `if else`\\n\\nA maneira mais simples de satisfazer nossa valida\xe7\xe3o \xe9 criar um `if` para cada campo e lan\xe7ar uma exce\xe7\xe3o caso algum retorne `false`.\\n\\n### Loops padr\xf5es: `for`\\n\\nOutra maneira \xe9 criar um `for` e percorrer o `req.body` com o `Object.keys` e verificar campo a campo.\\n\\n### Conhecendo o `every`\\n\\nMas nosso querido Javascript j\xe1 possu\xed um maravilhoso recurso que far\xe1 todo trabalho pesado para n\xf3s, e tudo isso de forma nativa, sem precisarmos instalar um pacote externo.\\n\\nO [every](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/every) \xe9 um m\xe9todo que itera nosso array e retorna `true` somente se todos os \xedndices retornarem `true`. Com ele \xe9 poss\xedvel percorrer nosso `req.body`, e caso n\xe3o tenha um determinado campo, automagicamente retornar\xe1 `false`, interrompendo dessa forma a itera\xe7\xe3o.\\n\\nVamos ver como ficar\xe1:\\n\\n```js title=\\"subscribersValidator.js\\"\\nclass SubscriberValidator {\\n  static isValid(data = {}) {\\n    const requiredFields = [\\"first_name\\", \\"last_name\\", \\"email\\", \\"cep\\"];\\n    return requiredFields.every((field) => data.hasOwnProperty(field));\\n  }\\n}\\n```\\n\\nNote que para cada campo iterado do nosso `requiredFields`, testamos com o [hasOwnProperty](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty) se `field` est\xe1 presente no objeto `data`.\\n\\n## Implementando o nosso validador\\n\\nVoltemos ao c\xf3digo do nosso endpoint, agora com nosso `SubscriberValidator`.\\n\\n```js title=\\"subscribers.js\\"\\nconst SubscriberValidator = require(\\"./validators/subscriber-validator\\");\\n\\nexports.subscribers = async (req, res) => {\\n  try {\\n    if (!SubscriberValidator.isValid(req.body)) {\\n      throw new Error(\\"Favor preencher todos os campos.\\");\\n    }\\n\\n    const { first_name, last_name, email, cep } = red.body;\\n\\n    await subscribersRepository.insert({\\n      first_name,\\n      last_name,\\n      email,\\n      cep,\\n    });\\n\\n    return res.status(200).json({\\n      message:\\n        \\"Obrigado por assinar nosso cat\xe1logo! Em breve enviaremos a edi\xe7\xe3o desse m\xeas por e-mail.\\",\\n    });\\n  } catch (error) {\\n    return res.status(400).json({\\n      message: error.message,\\n    });\\n  }\\n};\\n```\\n\\nVeja como ficou enxuta nossa feature. E o melhor \xe9 que o `every` interrompe imediatamente o loop e retorna `false` caso algum campo n\xe3o esteja l\xe1 no `req.body`.\\n\\n### B\xf4nus\\n\\nPodemos refatorar nosso `SubscriberValidator` e retornar o campo que o usu\xe1rio esqueceu de informar:\\n\\n```js title=\\"subscribersValidator.js\\"\\nclass SubscriberValidator {\\n  static isValid(data = {}) {\\n    const requiredFields = [\\"first_name\\", \\"last_name\\", \\"email\\", \\"cep\\", \\"phone\\"];\\n    let missingField;\\n\\n    const isValid = requiredFields.every((field) => {\\n      const hasField = data.hasOwnProperty(field);\\n      if (!hasField) missingField = field;\\n      return hasField;\\n    });\\n\\n    return {\\n      isValid,\\n      missingField,\\n    };\\n  }\\n}\\n```\\n\\nPodemos refatorar nosso endpoint e retornar o campo que est\xe1 faltando na `response`. Dessa forma o usu\xe1rio saber\xe1 onde errou:\\n\\n```js title=\\"subscribers.js\\"\\nconst SubscriberValidator = require(\\"./validators/subscriber-validator\\");\\n\\nexports.subscribers = async (req, res) => {\\n  try {\\n    const { isValid, missingField } = SubscriberValidator.isValid(req.body);\\n\\n    if (!isValid) {\\n      throw new Error(`O campo \'${missingField}\' \xe9 obrigat\xf3rio!`);\\n    }\\n\\n    const { first_name, last_name, email, cep } = red.body;\\n\\n    await subscribersRepository.insert({\\n      first_name,\\n      last_name,\\n      email,\\n      cep,\\n    });\\n\\n    return res.status(200).json({\\n      message:\\n        \\"Obrigado por assinar nosso cat\xe1logo! Em breve enviaremos a edi\xe7\xe3o desse m\xeas por e-mail.\\",\\n    });\\n  } catch (error) {\\n    return res.status(400).json({\\n      message: error.message,\\n    });\\n  }\\n};\\n```\\n\\n## Conclus\xe3o\\n\\nUtilizamos somente recursos nativos da nossa linguagem e evitamos pacotes externos desnecess\xe1rios.\\n\\nCaso sua API precisasse de muitas valida\xe7\xf5es, grava\xe7\xe3o de logs, mensagens super refinadas, ai sim seria melhor utilizar um pacote para fazer esse trabalho.\\n\\nMas aqui era algo extremamente simples.\\n\\nEspero que tenha gostado! Compartilhe essa postagem com seus amigos e colegas de trabalho! Vou ficando por aqui, at\xe9 a pr\xf3xima!"},{"id":"aprenda-a-criar-snippets-no-vscode","metadata":{"permalink":"/blog/en/aprenda-a-criar-snippets-no-vscode","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2022-02-20-aprenda-a-criar-snippets-no-vscode/index.md","source":"@site/blog/2022-02-20-aprenda-a-criar-snippets-no-vscode/index.md","title":"Aprenda a criar snippets no VS Code","description":"Hoje quero compartilhar com voc\xeas algo bem bacana, que \xe9 criar seus pr\xf3prios snippets no VS Code...","date":"2022-02-20T00:00:00.000Z","formattedDate":"February 20, 2022","tags":[{"label":"snippets","permalink":"/blog/en/tags/snippets"},{"label":"vscode","permalink":"/blog/en/tags/vscode"},{"label":"produtividade","permalink":"/blog/en/tags/produtividade"}],"readingTime":2.705,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"aprenda-a-criar-snippets-no-vscode","title":"Aprenda a criar snippets no VS Code","description":"Hoje quero compartilhar com voc\xeas algo bem bacana, que \xe9 criar seus pr\xf3prios snippets no VS Code...","keywords":["snippets","vscode","visual studio code"],"image":"/img/snippets.png","tags":["snippets","vscode","produtividade"],"authors":"brunelli"},"prevItem":{"title":"Como validar dados de uma forma elegante","permalink":"/blog/en/como-validar-dados-de-uma-forma-elegante"},"nextItem":{"title":"Criando atalhos para o git","permalink":"/blog/en/criando-atalhos-para-o-git"}},"content":"Salve galera, tudo bem?\\n\\nHoje quero compartilhar com voc\xeas algo bem bacana, que \xe9 criar seus pr\xf3prios snippets no VS Code.\\n\\n## O que \xe9 um Snippet?\\n\\n\x3c!-- truncate --\x3e\\n\\n### Um atalho\\n\\nNada mais \xe9 que um atalho para a cria\xe7\xe3o de um trecho de c\xf3digo. Pense em um c\xf3digo simples como esse:\\n\\n```js title=\\"L\xf3gica de um loop no Javascript\\"\\nfor (const item of items) {\\n  console.log(item);\\n}\\n```\\n\\nEsse tipo de c\xf3digo tende a se repetir muito durante nosso desenvolvimento rotineiro. Com isso, pode ficar chato escrever a mesma sintaxe toda vez.\\n\\n### Produtividade\\n\\n\xc9 ai que a m\xe1gica acontece! Que tal digitiar apenas `newfor` e o VS Code cri\xe1-lo para voc\xea? Sim \xe9 poss\xedvel!\\n\\n## Vamos come\xe7ar\\n\\n### Primeiro passo\\n\\nVamos criar o arquivo principal para nossos snippets.\\n\\nCom seu VS Code aberto, digite <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd> e digite **snippets** na barra que apareceu, selecione a op\xe7\xe3o **Preferences: Configure User Snippets** e depois **New Global Snippet File**.\\n\\nAbrir\xe1 uma caixinha para voc\xea digitar o nome do seu arquivo de snippets. Voc\xea pode colocar qualquer nome, eu vou colocar **my-snippets**.\\n\\n### Segundo passo\\n\\nVai abrir um arquivo mais ou menos assim:\\n\\n```json title=\\"my-snippets.code-snippets\\"\\n{\\n  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and\\n  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope\\n  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is\\n  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.\\n  // Placeholders with the same ids are connected.\\n  // Example:\\n  // \\"Print to console\\": {\\n  // \\t\\"scope\\": \\"javascript,typescript\\",\\n  // \\t\\"prefix\\": \\"log\\",\\n  // \\t\\"body\\": [\\n  // \\t\\t\\"console.log(\'$1\');\\",\\n  // \\t\\t\\"$2\\"\\n  // \\t],\\n  // \\t\\"description\\": \\"Log output to console\\"\\n  // }\\n}\\n```\\n\\nApague tudo e monte essa estrutura:\\n\\n```json title=\\"my-snippets.code-snippets\\"\\n{\\n  \\"newfor\\": {\\n    \\"scope\\": \\"\\",\\n    \\"prefix\\": \\"\\",\\n    \\"body\\": [],\\n    \\"description\\": \\"\\"\\n  }\\n}\\n```\\n\\n#### Significado de cada atributo\\n\\n- **newfor**: \xe9 o nome do nosso snippet\\n- **scope**: em quais tipos de arquivos seu snippet executar\xe1\\n- **prefix**: atalho para seu snippet\\n- **body**: linhas que seu snippet ir\xe1 gerar\\n- **description**: descri\xe7\xe3o do que seu snippet ir\xe1 gerar (n\xe3o obrigat\xf3rio)\\n\\n### Terceiro passo\\n\\nAgora que sabemos o que cada campo significa, vamos preenche-los com nosso c\xf3digo:\\n\\n```json title=\\"my-snippets.code-snippets\\"\\n{\\n  \\"newfor\\": {\\n    \\"scope\\": \\"javascript, typescript\\",\\n    \\"prefix\\": \\"newfor\\",\\n    \\"body\\": [\\"for (const item of items) {\\", \\"console.log(item)\\", \\"}\\"],\\n    \\"description\\": \\"cria um loop com for\\"\\n  }\\n}\\n```\\n\\n### Quarto passo\\n\\nPronto, salve o seu arquivo de snippet, v\xe1 para um arquivo **.js** ou **.ts** e fa\xe7a o teste. Digite `newfor` e aperte <kbd>Ctrl</kbd>+ <kbd>Space bar</kbd>.\\n\\nDever\xe1 aparecer o nome do seu snippet no autocomplete, dessa forma:\\n![](./screenshot.png)\\n\\nS\xf3 apertar <kbd>Enter</kbd> que seu c\xf3digo ser\xe1 gerado. Legal n\xe9?\\n\\n## Conclus\xe3o\\n\\nCaso voc\xea tenha chegado at\xe9 aqui e n\xe3o tenha funcionado, volte desde o come\xe7o e tente novamente com calma, voc\xea deve ter deixado algo passar. \xc9 bem simples.\\n\\nEspero que tenha gostado! Se foi \xfatil para voc\xea, compartilhe com seus amigos e colegas de trabalho!\\n\\nAt\xe9 a pr\xf3xima!"},{"id":"criando-atalhos-para-o-git","metadata":{"permalink":"/blog/en/criando-atalhos-para-o-git","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2022-02-19-criando-atalhos-para-o-git/index.md","source":"@site/blog/2022-02-19-criando-atalhos-para-o-git/index.md","title":"Criando atalhos para o git","description":"Hoje vou ensinar como criar atalhos para o git que v\xe3o aumentar tua produtividade. Sem muita enrola\xe7\xe3o, vamos direto para a pr\xe1tica...","date":"2022-02-19T00:00:00.000Z","formattedDate":"February 19, 2022","tags":[{"label":"git","permalink":"/blog/en/tags/git"},{"label":"aliases","permalink":"/blog/en/tags/aliases"}],"readingTime":2.73,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"criando-atalhos-para-o-git","title":"Criando atalhos para o git","description":"Hoje vou ensinar como criar atalhos para o git que v\xe3o aumentar tua produtividade. Sem muita enrola\xe7\xe3o, vamos direto para a pr\xe1tica...","keywords":["git","aliases","shortcut"],"image":"/img/git.jpg","tags":["git","aliases"],"authors":"brunelli"},"prevItem":{"title":"Aprenda a criar snippets no VS Code","permalink":"/blog/en/aprenda-a-criar-snippets-no-vscode"},"nextItem":{"title":"Como contornar a dor de escrever um teste unit\xe1rio?","permalink":"/blog/en/como-contornar-a-dor-de-escrever-um-teste-unit\xe1rio"}},"content":"![Git Logo](/img/git.jpg)\\n\\nOl\xe1, tudo bem?\\n\\nHoje vou ensinar como criar atalhos para o **git** que v\xe3o aumentar tua produtividade.\\nSem muita enrola\xe7\xe3o, vamos direto para a pr\xe1tica.\\n\\n## Escolher o editor de textos padr\xe3o\\n\\nAntes de come\xe7ar, \xe9 bom configurar o editor de texto de sua prefer\xeancia. Eu vou utilizar o [Vim](https://www.vim.org/), mas voc\xea pode utilizar o Code, Nano etc.\\n\\n\x3c!-- truncate --\x3e\\n\\n### Configurar editor\\n\\nSubistitua o **\\"vim\\"** pelo editor de sua preferencia. Segue a lista dos mais utilizados:\\n\\n- vim\\n- nano\\n- code\\n- gedit\\n\\n```bash title=\\"Definir editor padr\xe3o\\"\\ngit config --global core.editor vim\\n```\\n\\n## Prontos para come\xe7ar\\n\\n### Abrir arquivo de configura\xe7\xf5es do git\\n\\nIsso abrit\xe1 seu arquivo de configura\xe7\xf5es do git em seu editor de texto.\\n\\n```bash title=\\"Abrindo meu arquivo de configura\xe7\xf5es\\"\\ngit config --global --edit\\n```\\n\\n### Adicionar usu\xe1rio\\n\\n\xc9 importante adicionar um usu\xe1rio ao seu git config, pois ele ser\xe1 utilizado em seus commits.\\n\\n```bash title=\\"Configurando meu git\\"\\n[user]\\n    email = meu_email@mail.com\\n    name = nome_que_aparecera_nos_commits\\n```\\n\\n## Atalhos\\n\\n### git status\\n\\nVamos definir nosso primeiro atalho, o `git status -s`. Esse comando exibe o status atual da sua **stage area**, quais arquivos est\xe3o commitados, e quais foram modificados.\\n\\n```bash title=\\"Configurando meu git\\"\\n[user]\\n    email = meu_email@mail.com\\n    name = nome_que_aparecera_nos_commits\\n\\n[alias]\\n    s = !git status -s\\n```\\n\\nAgora o status dos seus commits ficar\xe3o mais clean.\\n\\n### git add && git commit\\n\\nEsses dois s\xe3o muito utilizados, que tal torn\xe1-los em um \xfanico comando?\\n\\n```bash title=\\"Configurando meu git\\"\\n[user]\\n    email = meu_email@mail.com\\n    name = nome_que_aparecera_nos_commits\\n\\n[alias]\\n    s = !git status -s\\n    c = !git add --all && git commit -m\\n```\\n\\nAgora quando digitarmos `git c` em nosso terminal, nosso **alias** ir\xe1 adicionar e commitar ao mesmo tempo, s\xf3 vamos precisar informar a mensagem. Exemplo:\\n\\n```bash title=\\"Configurando meu git\\"\\ngit c \'feat: agora ficou mais f\xe1cil!\'\\n```\\n\\n### git pull/push origin HEAD\\n\\nOutro comando muito utilizado. Vamos simplific\xe1-lo.\\n\\n```bash title=\\"Configurando meu git\\"\\n[user]\\n    email = meu_email@mail.com\\n    name = nome_que_aparecera_nos_commits\\n\\n[alias]\\n    s = !git status -s\\n    c = !git add --all && git commit -m\\n    pullo = !git pull origin HEAD\\n    pusho = !git push origin HEAD\\n```\\n\\nAgora podemos usar essa combina\xe7\xe3o:\\n\\n```bash\\ngit c \'feat: adicionar simplicidade\' && git pusho\\n```\\n\\n### git log\\n\\nQuem nunca se perdeu ao utilizar um `git log`? S\xe3o muitas informa\xe7\xf5es de uma vez. Vamos simplificar:\\n\\n```bash title=\\"Configurando meu git\\"\\n[user]\\n    email = meu_email@mail.com\\n    name = nome_que_aparecera_nos_commits\\n\\n[alias]\\n    s = !git status -s\\n    c = !git add --all && git commit -m\\n    pullo = !git pull origin HEAD\\n    pusho = !git push origin HEAD\\n    l = !git log --pretty=format:\'%h %s %cn %cr\'\\n```\\n\\n#### Vamos entender o que fizemos\\n\\n- **%h**: id do commit (hash)\\n- **%s**: mensagem do commit\\n- **%cn**: autor do commit\\n- **%cr**: quanto tempo desde o commit\\n\\nAgora seu `git l` retornar\xe1 os dados do commit de uma forma bem resumida. Tamb\xe9m d\xe1 pra mudar a cor, vou deixar a documenta\xe7\xe3o logo abaixo pra voc\xea consultar.\\n\\n## Links \xfateis\\n\\n- [Pretty format](https://git-scm.com/docs/pretty-formats)\\n- [Git config](https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration)\\n\\n## Conclus\xe3o\\n\\nN\xe3o existe limites, podemos combinar v\xe1rios comandos e simplificar nossa rotina. Agora voc\xea pode brincar e criar seus pr\xf3prios atalhos!\\n\\nEspero que tenha gostado! Se te ajudou de alguma maneira, compartilhe com seus amigos e colegas de trabalho!\\n\\nAt\xe9 a pr\xf3xima!"},{"id":"como-contornar-a-dor-de-escrever-um-teste-unit\xe1rio","metadata":{"permalink":"/blog/en/como-contornar-a-dor-de-escrever-um-teste-unit\xe1rio","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2021-12-16-como-contornar-a-dor-de-escrever-um-teste-unitario/index.md","source":"@site/blog/2021-12-16-como-contornar-a-dor-de-escrever-um-teste-unitario/index.md","title":"Como contornar a dor de escrever um teste unit\xe1rio?","description":"Acredito que todo mundo concorda que um c\xf3digo sem testes, \xe9 um c\xf3digo inst\xe1vel e fr\xe1gil \xe0 mudan\xe7as...","date":"2021-12-16T00:00:00.000Z","formattedDate":"December 16, 2021","tags":[{"label":"tdd","permalink":"/blog/en/tags/tdd"},{"label":"testes","permalink":"/blog/en/tags/testes"},{"label":"teste unit\xe1rio","permalink":"/blog/en/tags/teste-unitario"}],"readingTime":3.6,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"como-contornar-a-dor-de-escrever-um-teste-unit\xe1rio","title":"Como contornar a dor de escrever um teste unit\xe1rio?","description":"Acredito que todo mundo concorda que um c\xf3digo sem testes, \xe9 um c\xf3digo inst\xe1vel e fr\xe1gil \xe0 mudan\xe7as...","keywords":["tdd","tests","tdd example","tdd javascript"],"image":"/img/tdd.jpeg","authors":"brunelli","tags":["tdd","testes","teste unit\xe1rio"]},"prevItem":{"title":"Criando atalhos para o git","permalink":"/blog/en/criando-atalhos-para-o-git"},"nextItem":{"title":"O impacto da educa\xe7\xe3o em minha vida","permalink":"/blog/en/o-impacto-da-educa\xe7\xe3o-em-minha-vida"}},"content":"![TDD Banner](/img/tdd.jpeg)\\n\\nSalve galera, tudo tranquilo? Esse \xe9 meu segundo artigo, e gostaria de compartilhar algo que vem me ajudando muito durante o desenvolvimento de software e na minha pr\xf3pria evolu\xe7\xe3o profissional.\\n\\nEstou falando sobre os **testes unit\xe1rios**. Acredito que todo mundo concorda que um c\xf3digo sem testes, \xe9 um c\xf3digo inst\xe1vel e fr\xe1gil \xe0 mudan\xe7as. \xc9 muito ruim programar no escuro, n\xf3s nunca temos certeza que o que estamos desenvolvendo ir\xe1 funcionar em produ\xe7\xe3o, sem conflitar com as features j\xe1 existentes.\\n\\nPor outro lado, escrever testes para uma feature j\xe1 implementada pode ser algo muito doloroso, por isso **muita gente prefere correr o risco e deixar o c\xf3digo sem cobertura.**\\n\\n\x3c!--truncate--\x3e\\n\\nMas recentemente venho estudando fortemente uma metodologia que abriu minha mente, o **TDD**, ou em portugu\xeas **\\"Desenvolvimento guiado por testes\\"**. No TDD n\xf3s criamos o teste primeiro, e s\xf3 depois criamos a implementa\xe7\xe3o de fato, que far\xe1 o teste passar. Isso faz com que nosso c\xf3digo sempre esteja coberto por testes.\\n\\n## Traduzindo\\n\\nSe eu quisesse criar uma fun\xe7\xe3o que me retornasse o maior n\xfamero de uma lista em Javascript, utilizando o **TDD** (escrevendo o teste primeiro), eu come\xe7aria fazendo algo mais ou menos assim:\\n\\n```js title=\\"pegueOMaiorNumero.test.js\\"\\n// Sintaxe de um framework de testes do Javascript\\n\\ndescribe(\\"pegueOMaiorNumero\\", () => {\\n  test(\\"deve retornar o maior n\xfamero de uma lista\\", () => {\\n    const maiorNumero = pegueOMaiorNumero([1, 9, 7, 15, 21, 10]);\\n    expect(maiorNumero).toBe(21);\\n  });\\n});\\n```\\n\\nNesse caso, eu forneci uma lista com alguns n\xfameros, onde o 21 \xe9 o maior deles. Mas note que em nenhum momento foi criada a fun\xe7\xe3o **pegueOMaiorNumero**. Estou invocando uma fun\xe7\xe3o que **ainda n\xe3o foi criada**, e ainda estou esperando que o resultado seja 21. Nesse caso o teste ir\xe1 falhar.\\n\\n\xc9 ai que a brincadeira come\xe7a. Quando o teste falha, \xe9 sinal de que precisamos implementar a feature que fa\xe7a esse teste passar.\\n\\n## Ent\xe3o vamos l\xe1!\\n\\nVou criar a fun\xe7\xe3o que far\xe1 o teste passar:\\n\\n```js title=\\"pegueOMaiorNumero.test.js\\"\\nconst pegueOMaiorNumero = (numeros) => {\\n  let maior = 0;\\n\\n  for (let i = 0; i < numeros.length; i++) {\\n    if (numeros[i] > maior) {\\n      maior = numeros[i];\\n    }\\n  }\\n\\n  return maior;\\n};\\n\\ndescribe(\\"pegueOMaiorNumero\\", () => {\\n  test(\\"deve retornar o maior n\xfamero de uma lista\\", () => {\\n    const maiorNumero = pegueOMaiorNumero([1, 9, 7, 15, 21, 10]);\\n    expect(maiorNumero).toBe(21);\\n  });\\n});\\n```\\n\\nAgora o teste come\xe7ar\xe1 a passar. Veja que o algoritmo n\xe3o ficou dos melhores, mas conseguiu satisfazer o que o teste pediu. Agora que o teste est\xe1 passando, posso refatorar a fun\xe7\xe3o **pegueOMaiorNumero** sem medo, pois ela est\xe1 coberta por um teste. Caso a fun\xe7\xe3o passe a retornar uma string, null, ou um n\xfamero que n\xe3o seja o maior, **o teste ir\xe1 me avisar, reprovando**.\\n\\n## Vamos refatorar, sem medo!\\n\\n```js title=\\"pegueOMaiorNumero.test.js\\"\\nconst pegueOMaiorNumero = (numeros) => {\\n  return Math.max(...numeros);\\n};\\n\\ndescribe(\\"pegueOMaiorNumero\\", () => {\\n  test(\\"deve retornar o maior n\xfamero de uma lista\\", () => {\\n    const maiorNumero = pegueOMaiorNumero([1, 9, 7, 15, 21, 10]);\\n    expect(maiorNumero).toBe(21);\\n  });\\n});\\n```\\n\\nPronto, se a gente rodar esse teste, ele ir\xe1 continuar passando, pois o **Math.max** est\xe1 fazendo o mesmo que o **la\xe7o de repeti\xe7\xe3o** estava fazendo anteriormente, mas de uma maneira mais enxuta. O fato \xe9 que, temos confian\xe7a de alterar um c\xf3digo que nos fale se a nossa regra de neg\xf3cios falhou. **\xc9 inadmiss\xedvel** que nossa fun\xe7\xe3o **pegueOMariorNumero** retorne um n\xfamero que n\xe3o \xe9 o maior.\\n\\n## Conclus\xe3o\\n\\nNossa simples feature de retornar o maior n\xfamero, **esteve durante todo o tempo de desenvolvimento coberta por um teste**. Se a gente fizesse a feature primeiro ao inv\xe9s do teste, ter\xedamos que test\xe1-la manualmente a cada altera\xe7\xe3o, printando o resultado no console, at\xe9 de fato escrever um teste pra ela. Isso seria **cansativo**. O teste \xe9 automatizado, ou seja, escrevemos uma \xfanica vez, e ele sempre ir\xe1 assegurar o resultado pra gente.\\n\\nEscolhi esse exemplo de algoritmo, pois h\xe1 v\xe1rias formas de implement\xe1-lo. Caso voc\xea descubra alguma forma mais enxuta que essa apresentada, poder\xe1 implementar sem correr o risco de quebrar sua aplica\xe7\xe3o.\\n\\nComo material complementar, recomendo essa live que aconteceu no dia 09/12/2021, e que considero excepcional por **dois motivos: n\xe3o tem enrola\xe7\xe3o, e os caras sabem o que est\xe3o ensinando.** Por hoje \xe9 isso, forte abra\xe7o e at\xe9 a pr\xf3xima!\\n\\n[![Live TDD na pr\xe1tica - Diego Fernandes e Rodrigo Manguinho](https://img.youtube.com/vi/sg1zFpNM5Jw/0.jpg)](https://youtu.be/sg1zFpNM5Jw)\\n\\n- Reposit\xf3rio c\xf3digo fonte: [https://github.com/mrbrunelli/tdd-pega-o-maior-numero](https://github.com/mrbrunelli/tdd-pega-o-maior-numero)"},{"id":"o-impacto-da-educa\xe7\xe3o-em-minha-vida","metadata":{"permalink":"/blog/en/o-impacto-da-educa\xe7\xe3o-em-minha-vida","editUrl":"https://github.com/mrbrunelli/blog/tree/master/blog/2021-05-07-o-impacto-da-educacao-em-minha-vida/index.md","source":"@site/blog/2021-05-07-o-impacto-da-educacao-em-minha-vida/index.md","title":"O impacto da educa\xe7\xe3o em minha vida","description":"Meu \xfaltimo emprego antes de me tornar Desenvolvedor em 2019 era de Auxiliar de Produ\xe7\xe3o em uma f\xe1brica aqui da cidade...","date":"2021-05-07T00:00:00.000Z","formattedDate":"May 7, 2021","tags":[{"label":"educa\xe7\xe3o","permalink":"/blog/en/tags/educacao"},{"label":"a import\xe2ncia da educa\xe7\xe3o","permalink":"/blog/en/tags/a-importancia-da-educacao"},{"label":"aprendizado","permalink":"/blog/en/tags/aprendizado"}],"readingTime":2.82,"truncated":true,"authors":[{"name":"Matheus R. Brunelli","title":"Desenvolvedor de software","url":"https://github.com/mrbrunelli","imageURL":"https://avatars.githubusercontent.com/u/54479807?v=4&s=128","key":"brunelli"}],"frontMatter":{"slug":"o-impacto-da-educa\xe7\xe3o-em-minha-vida","title":"O impacto da educa\xe7\xe3o em minha vida","description":"Meu \xfaltimo emprego antes de me tornar Desenvolvedor em 2019 era de Auxiliar de Produ\xe7\xe3o em uma f\xe1brica aqui da cidade...","keywords":["a import\xe2ncia da educa\xe7\xe3o","educa\xe7\xe3o","conhecimento","transi\xe7\xe3o de carreira"],"image":"/img/education.jpeg","authors":"brunelli","tags":["educa\xe7\xe3o","a import\xe2ncia da educa\xe7\xe3o","aprendizado"]},"prevItem":{"title":"Como contornar a dor de escrever um teste unit\xe1rio?","permalink":"/blog/en/como-contornar-a-dor-de-escrever-um-teste-unit\xe1rio"}},"content":"![Education Banner](/img/education.jpeg)\\n\\nOntem enquanto organizava minha gaveta, me deparei com minha certid\xe3o de casamento, onde estava escrito na primeira linha:\\n\\n> MATHEUS RICARDO BRUNELLI, brasileiro, de profiss\xe3o: Auxiliar de Produ\xe7\xe3o. Ano 2018.\\n\\nMeu \xfaltimo emprego antes de me tornar Desenvolvedor em 2019 era de Auxiliar de Produ\xe7\xe3o em uma f\xe1brica aqui da cidade. O trabalho era muito simples, porem muito desgastante, Dorflex e Torsilax (n\xe3o \xe9 propaganda) faziam parte da minha intensa semana.\\n\\n\x3c!--truncate--\x3e\\n\\n### Tecnologia, uma realidade crescente\\n\\nCerto dia a f\xe1brica inteira parou para ouvir o an\xfancio dos coordenadores das faculdades da regi\xe3o, e foi anunciado dentre os demais cursos o curso de Sistemas para Internet, e a fala do coordenador [Anderson Burnes](https://www.linkedin.com/in/profburnes) (que eu j\xe1 conhecia) foi muito convincente, pois naquele ano v\xe1rias empresas estavam passando por transforma\xe7\xf5es digitais, e estavam precisando de desenvolvedores qualificados, e os sal\xe1rios eram bem diferentes da minha realidade.\\n\\nEu trabalhava muito para conseguir sustentar a minha fam\xedlia (eu, esposa e os doguinhos) e mesmo assim n\xe3o era suficiente, um pneu furado ou uma gripe eram suficientes para acabar com nossas economias do m\xeas rsrs.\\n\\n### Educa\xe7\xe3o, um investimento muito rent\xe1vel\\n\\nEu sabia que o \xfanico caminho para uma mudan\xe7a de vida, era atrav\xe9s da educa\xe7\xe3o. E naquele ano estudei muito para o Enem, e consegui uma Bolsa ProUni para o curso de Sistemas para Internet na [UniAlfa](https://www.alfaumuarama.edu.br/fau).\\n\\nMe lembro que dessa vez eu n\xe3o estava apenas fazendo um curso por fazer, eu estava colocando todas minhas energias em algo que eu acreditava poder mudar minha vida.\\n\\n### Esfor\xe7o no lugar certo\\n\\nDurante os primeiros semestres, percebi que existiam muitos caminhos para seguir profiss\xe3o, alguns bem confusos, e eu precisaria ter foco em algo para poder me destacar. Comecei a pesquisar por tecnologias que me ajudariam a entrar no mercado mais r\xe1pido, pois essa era minha maior motiva\xe7\xe3o.\\n\\nQuando obtive um m\xednimo de confian\xe7a nessas tecnologias, pedi demiss\xe3o do meu emprego na f\xe1brica, para que eu pudesse me dedicar aos estudos de forma integral. Minha fam\xedlia ficou com muito medo da minha decis\xe3o, afinal, n\xe3o haviam garantias que eu conseguiria entrar na \xe1rea, antes da nossa min\xfascula reserva financeira acabar.\\n\\n### F\xe9, foco e medo\\n\\nForam esses tr\xeas elementos que me acompanharam nessa transi\xe7\xe3o. F\xe9 porque n\xf3s n\xe3o enxergamos o amanh\xe3. Foco porque o tempo \xe9 escasso. Medo porque ele funciona como uma balan\xe7a, quanto mais arriscado, mais sentimos medo.\\n\\nComo todo trabalhado duro traz recompensas, a minha chegou aos 45 do segundo tempo, quando s\xf3 restavam algumas moedinhas no cofre. Consegui meu primeiro emprego na \xe1rea, gra\xe7as ao networking (vou escrever um artigo s\xf3 desse cara) e ao meu esfor\xe7o \xe9 claro.\\n\\n### Mercado aquecido\\n\\nSe eu pudesse deixar um conselho para quem est\xe1 come\xe7ando, seria:\\n\\n> Estude, e fa\xe7a de tudo para tentar entrar no mercado. Tenha foco, e invista seu tempo estudando o que te dar\xe1 retorno.\\n\\nNem s\xf3 de teoria vive o programador. Essa \xe9 uma profiss\xe3o muito pr\xe1tica, quanto mais se exercita, mais se aprende. Os melhores exerc\xedcios s\xe3o os problemas reais de uma empresa. Mesmo que ganhando pouco no come\xe7o, trabalhar com problemas reais n\xe3o tem pre\xe7o, essa experi\xeancia n\xe3o pode ser adquirida de outra forma.\\n\\n### Considera\xe7\xf5es finais\\n\\nEsse foi meu primeiro artigo, fiquei muito empolgado ao escrev\xea-lo. Se voc\xea chegou at\xe9 aqui, meus agradecimentos. Espero que tenha sido \xfatil para voc\xea.\\n\\nForte abra\xe7o, e at\xe9 o pr\xf3ximo artigo!"}]}')}}]);